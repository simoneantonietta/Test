/**----------------------------------------------------------------------------
 * PROJECT: gpsnif
 * PURPOSE:
 * 
 *-----------------------------------------------------------------------------  
 * CREATION: 22 Jun 2016
 * Author: Luca Mini
 * 
 * LICENCE: please see LICENCE.TXT file
 * 
 * HISTORY (of the module):
 *-----------------------------------------------------------------------------
 * Author              | Date        | Description
 *-----------------------------------------------------------------------------
 *-----------------------------------------------------------------------------
 */

#ifndef SCOPEVIEWWINDOW_H_
#define SCOPEVIEWWINDOW_H_

#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/Fl_Input.H>
#include <math.h>

#include "GuiPlacer.h"
#include "ScopeView.h"

#define SCOPE_WIN_SIZE_W			800
#define SCOPE_WIN_SIZE_H			400

#define SCOPE_MAIN_OFFSET_X		80
#define SCOPE_MAIN_OFFSET_Y		30

#define SCOPE_VARINPUT_W			50
#define SCOPE_VARINPUT_H			20

#define SCOPE_SIZE_W					700
#define SCOPE_SIZE_H					300

#define SCOPE_DIVVALUE_W			50
#define SCOPE_DIVVALUE_H			20

#define SCOPE_TRACE_DEFAULT							1024


class ScopeViewWindow
{
public:
	ScopeViewWindow() {};
	virtual ~ScopeViewWindow() {};


	/**
	 * render the scope window
	 */
	void render()
	{
	GuiPlacer gp;
	scope_win = new Fl_Double_Window(SCOPE_WIN_SIZE_W, SCOPE_WIN_SIZE_H,"Scope Window");
	scope_win->begin();

	gp.placeOffset(scope_win,SCOPE_MAIN_OFFSET_X,SCOPE_MAIN_OFFSET_Y,SCOPE_VARINPUT_W,SCOPE_VARINPUT_H);
	var_in = new Fl_Input(GUIPLC_GETPOS(gp), "var");

	gp.placeBelow(var_in,SCOPE_SIZE_W,SCOPE_SIZE_H,5);
	iscope = new ScopeView(GUIPLC_GETPOS(gp));

	gp.placeBelow(iscope,SCOPE_SIZE_W,SCOPE_SIZE_H,50);


	scope_win->end();
	scope_win->show();
	}

	/**
	 * start plotting
	 */
	void start()
	{
	iscope->start();
	}

	/**
	 * set the y range
	 * @param ymin
	 * @param ymax
	 */
	void setYrange(float ymin,float ymax)
	{
	iscope->setYrange(ymin,ymax);
	}

	/**
	 * grid setup divisor
	 * @param xgrid
	 * @param ygrid
	 */
	void setGrid(int xgrid,int ygrid)
	{
	iscope->setGrid(xgrid,ygrid);
	}

	/**
	 * set tick value
	 * @param t [s]
	 */
	void setTick(float t)
	{
	iscope->setTick(t);
	}

private:
  ScopeView *iscope;
  Fl_Double_Window *scope_win;
  Fl_Input *var_in;
  Fl_Box *xdiv_box;
  Fl_Box *ydiv_box;

  //static void update_scope(void *obj);
};

//-----------------------------------------------
#endif /* SCOPEVIEWWINDOW_H_ */
