/*
 *-----------------------------------------------------------------------------
 * PROJECT: gpsnif
 * PURPOSE: see module CommTh.h file
 *-----------------------------------------------------------------------------
 */

#include "CommTh.h"
#include <pthread.h>
#include <limits.h>
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>


/**
 * ctor
 */
CommTh::CommTh()
{
pd=new protocolData_t();
HPROT_SETMYID(pd,HPROT_INITIAL_ID);
timeout=3000;	// default timeout [ms]
answeredFrom=0;
pthread_mutex_init(&mutexRx, NULL);
pthread_mutex_init(&mutexTx, NULL);
pthread_mutex_init(&mutexStats, NULL);
endApplication=false;
setStatus(st_idle);
startedTx=false;
startedRx=false;
useFifo=false;
useUDPDebug=false;
udpDbg=NULL;
clearStats();
}

/**
 * dtor
 */
CommTh::~CommTh()
{
if(startedRx)
	{
	joinThread('r');
	pthread_mutex_destroy(&mutexRx);
	}
if(startedTx)
	{
	joinThread('t');
	pthread_mutex_destroy(&mutexTx);
	}
//delete pd;
}

/**
 * open the communication
 * @param dev device can be ip or serial device or other else
 * @param param baudrate/port
 * @param p implementation data
 * @return true:ok
 */
bool CommTh::openCommunication(const string dev, int param, void* p )
{
bool ret;
ret=impl_OpenComm(dev,param,p);
resetApplicationRequest();
return ret;
}

/**
 * close the communication
 * @param p implementation data
 */
void CommTh::closeCommunication(void *p)
{
if(connected)
	{
	endApplicationRequest();
	joinThread('r');
	impl_CloseComm(p);
	}
connected=false;
startedRx=false;
}

/**
 * THREAD RX JOB
 * which is executed in the thread
 */
void CommTh::runRx()
{
//_sd = reinterpret_cast<SharedData *>(arg);
frame_t f;
hprotFrameSetup(&f,frameData);
while (!endApplicationStatus())
	{
	waitForData();		// handle rx data

	if(rxndata==0) continue;

	pthread_mutex_lock(&mutexRx);
	onDataRaw(pd,rxBuffer,rxndata);
	do
		{
		initial_ndata=rxndata;	// store temporary (debug usage)
		rxndata=hprotFrameParserNData(pd,&f,rxBuffer,rxndata);
		if(isPacketProtocol())
			{
			// if packet, discard all remaining data
			rxndata=0;
			}
		//------------------
		if(pd->protCondition==pc_ok || pd->protCondition==pc_error_crc || pd->protCondition==pc_error_cmd)
			{
			if(pd->protCondition==pc_error_crc)
				{
				onError(f,pc_error_crc);
				pthread_mutex_lock(&mutexStats);
				stats.error_crc++;
				stats.devErrors[f.srcID].crc++;
				pthread_mutex_unlock(&mutexStats);

				//-------------
				// DEBUG
				char _tmp[HPROT_BUFFER_SIZE*2+1];
				Hex2AsciiHex(_tmp,rxBuffer,initial_ndata,1,' ');
				printf("%s] CRC_ERROR: RX Frame (encrypt): %s\n",__FUNCTION__,_tmp);
				if(pd->flags.isCrypto)
					{
					int nn=hprotBuffDecrypt(pd,rxBuffer,initial_ndata);
					Hex2AsciiHex(_tmp,rxBuffer,nn,1,' ');
					printf("%s] CRC_ERROR: RX Frame (decrypt): %s\n",__FUNCTION__,_tmp);
					}
				//-------------

				hprotReset(pd);
				}
			if(pd->protCondition==pc_error_cmd)
				{
				onError(f,pc_error_cmd);
				pthread_mutex_lock(&mutexStats);
				stats.error_cmd++;
				stats.devErrors[f.srcID].cmd++;
				pthread_mutex_unlock(&mutexStats);
				hprotReset(pd);
				}
	#ifdef HPROT_ENABLE_RX_RAW_BUFFER
			printRx(pd->rxRawBuffer,pd->rxRawBufferCount,pd->protCondition);
			clearRawBuffer();
	#endif
			}

		if(pd->protCondition==pc_ok)
			{
			// main state machine
			switch(status)
				{
				//.............................................
				case st_idle:
					/*
					 * in this states arrives all frames sent from server
					 * most of the frames are handled by the callbacks on the user side,
					 * but someone such as events are handled here
					 */
					onFrame(f);
					break;

				//.............................................
				case st_ansPending:
					/*
					 * here if an answer was expected and if is received
					 */
					if(f.srcID==ansPendingFrom && f.num==ansFrameNumb)
						{
						if(ansCommand == HPROT_CMD_NONE || f.cmd==ansCommand)
							{
							if(!to.expired)
								{
								hprotReset(pd);
								setStatus(st_idle);
								answeredFrom=f.srcID;
								rxResult.setOK();
								}
							else
								{
								rxResult.setError();
								answeredFrom=HPROT_INVALID_ID;
								hprotReset(pd);
								setStatus(st_idle);
								}
							}
						}
					break;

				//.............................................
				case st_ansPending_generic:
					if(ansCommand == HPROT_CMD_NONE || f.cmd==ansCommand)
						{
						if(!to.expired)
							{
							hprotReset(pd);
							setStatus(st_idle);
							answeredFrom=f.srcID;
							rxResult.setOK();
							}
						else
							{
							rxResult.setError();
							answeredFrom=HPROT_INVALID_ID;
							hprotReset(pd);
							setStatus(st_idle);
							stats.ans_invalid_id++;
							}
						}
					break;
				//.............................................
				case st_error:
					break;
				}
			}
		} while (rxndata>0);
	pthread_mutex_unlock(&mutexRx);
	}
startedRx=false;
//th_end();
destroyThread('r');
cout << "Communication tread stopped" << endl;
}

/**
 * THREAD TX JOB
 * which is executed in the thread
 */
void CommTh::runTx()
{
// answer
while(isWaiting())
	{
	usleep(100000);
	}
if(getResultStatus()==Result::is_error)
	{
	txResult.setError(getErrorMessage().c_str(),Result::is_error);
	//dbg->trace(DBG_NOTIFY,"protocol: " + _S txResult.message);
	}
else
	{
	txResult.setOK(0);
	}
startedTx=false;
destroyThread('t');
}

/**
 * send a command
 * @param dstId
 * @param cmd
 * @param data
 * @param len
 * @param p implementation data
 */
void CommTh::sendCommand(uint8_t dstId, uint8_t cmd, uint8_t* data, uint8_t len,void *p)
{
int n=hprotFrameBuild(pd,txBuffer,HPROT_HDR_COMMAND,pd->myID,dstId,cmd,data,len,HPROT_SET_FNUMBER_DEFAULT);
printTx(txBuffer,n);
impl_Write(txBuffer,n,dstId,p);
}
/**
 * send an answer
 * @param dstId
 * @param cmd
 * @param data
 * @param len
 * @oaram fnumb use HPROT_SET_FNUMBER_DEFAULT or handle it
 * @param p implementation data
 */
void CommTh::sendAnswer(uint8_t dstId, uint8_t cmd, uint8_t* data, uint8_t len,uint8_t fnumb,void *p)
{
pthread_mutex_lock(&mutexRx);
int n=hprotFrameBuild(pd,txBuffer,HPROT_HDR_ANSWER,pd->myID,dstId,cmd,data,len,fnumb);
printTx(txBuffer,n);
impl_Write(txBuffer,n,dstId,p);
pthread_mutex_unlock(&mutexRx);
}

/**
 * send a request
 * @param dstId
 * @param cmd
 * @param data
 * @param len
 * @param nretry
 * @param setAnsPending
 * @param p implementation data
 */
void CommTh::sendRequest(uint8_t dstId, uint8_t cmd, uint8_t* data, uint8_t len, bool setAnsPending, void *p)
{
pthread_mutex_lock(&mutexRx);
int n=hprotFrameBuild(pd,txBuffer,HPROT_HDR_REQUEST,pd->myID,dstId,cmd,data,len,HPROT_SET_FNUMBER_DEFAULT);
hprotReset(pd);
printTx(txBuffer,n);
to.startTimeout(timeout);
if(setAnsPending)
	{
	setCommAnsPending(dstId, pd->frameNumber,HPROT_CMD_NONE);
	rxResult.setWaiting();
	}
impl_Write(txBuffer,n,dstId,p);
pthread_mutex_unlock(&mutexRx);
}

/**
 * send a generic frame
 * @param hdr
 * @param srcId
 * @param dstId
 * @param cmd
 * @param data
 * @param len
 * @param p implementation data
 */
void CommTh::sendFrame(uint8_t hdr, uint8_t srcId, uint8_t dstId, uint8_t cmd, uint8_t* data, uint8_t len,void *p)
{
pthread_mutex_lock(&mutexRx);
int n=hprotFrameBuild(pd,txBuffer,hdr,srcId,dstId,cmd,data,len,HPROT_SET_FNUMBER_DEFAULT);
printTx(txBuffer,n);
impl_Write(txBuffer,n,dstId,p);
pthread_mutex_unlock(&mutexRx);
}

/**
 * set the end application status to terminate all
 */
void CommTh::endApplicationRequest()
{
//cout << "ending thread" << endl;
pthread_mutex_lock(&mutexRx);
this->endApplication=true;
pthread_mutex_unlock(&mutexRx);
}

/**
 * get the termination status
 * @return true: end; false continue
 */
bool CommTh::endApplicationStatus()
{
bool ret;
pthread_mutex_lock(&mutexRx);
ret=this->endApplication;
pthread_mutex_unlock(&mutexRx);
return ret;
}

/**
 * set the end application status to permit the restart
 */
void CommTh::resetApplicationRequest()
{
//cout << "thread reset" << endl;
pthread_mutex_lock(&mutexRx);
this->endApplication=false;
pthread_mutex_unlock(&mutexRx);
}

/**
 * change the status of the main state machine to wait an answer
 * @param ansFromID specifies from which ID should have an answer. If HPROT_INVALID_ID is a generic one
 * @param frameNumber specifies the frame number of the answer (if ansFromID=HPROT_INVALID_ID
 * @param ansCmd specifies the command number value (if =HPROT_CMD_NONE ignored)
 */
void CommTh::setCommAnsPending(uint8_t ansFromID, uint8_t frameNumber, uint8_t ansCmd)
{
pthread_mutex_lock(&mutexRx);
ansPendingFrom=ansFromID;
answeredFrom=HPROT_INVALID_ID;
ansCommand=ansCmd;
ansFrameNumb=frameNumber;
if(ansFromID==HPROT_INVALID_ID)
	setStatus(st_ansPending_generic);
else
	setStatus(st_ansPending);
pthread_mutex_unlock(&mutexRx);
}

/**
 * set the status of the general result
 * @param res status
 */
void CommTh::setResultStatus(Result::status_e res)
{
pthread_mutex_lock(&mutexRx);
rxResult.setStatus(res);
pthread_mutex_unlock(&mutexRx);
}

/**
 * get the status of the result for the operation
 * @return status
 */
Result::status_e CommTh::getResultStatus()
{
Result::status_e ret;
pthread_mutex_lock(&mutexRx);
ret=rxResult.getStatus();
pthread_mutex_unlock(&mutexRx);
return ret;
}

/**
 * get the waiting status of the current operation
 * @return true: waiting
 */
bool CommTh::isWaiting()
{
bool ret=true;
pthread_mutex_lock(&mutexRx);
if(status==st_ansPending)
	{
	if(to.checkTimeout())
		{
		rxResult.setError("timeout",1);
		ret=false;
		}
	else
		{
		ret=rxResult.isWaiting();
		}
	}
else
	{
	ret=false;	// nothing to wait
	}
pthread_mutex_unlock(&mutexRx);
return ret;
}

/**
 * ok status of the current operation
 * @return true: OK
 */
bool CommTh::isOK()
{
bool ret;
pthread_mutex_lock(&mutexRx);
ret=rxResult.isOK();
pthread_mutex_unlock(&mutexRx);
return ret;
}

/**
 * error status of the current operation
 * @return true: error
 */
bool CommTh::isError()
{
bool ret;
pthread_mutex_lock(&mutexRx);
ret=rxResult.isError();
pthread_mutex_unlock(&mutexRx);
return ret;
}

/**
 * if an error condition occur, a message can be read
 * note that after a reading the message will be erased
 * @return message error message
 */
string CommTh::getErrorMessage()
{
string ret;
pthread_mutex_lock(&mutexRx);
ret=rxResult.message;
rxResult.reset();	// clear for next usage
pthread_mutex_unlock(&mutexRx);
return ret;
}

#ifdef HPROT_ENABLE_RX_RAW_BUFFER
/**
 * clear the raw buffer
 */
void CommTh::clearRawBuffer()
{
//_commth_mutex->lock();
pd->rxRawBufferCount=0;
//_commth_mutex->unlock();
}

#endif

/**
 * wait indefinitely for incoming data
 */
void CommTh::waitForData(void* p)
{
rxndata=impl_Read(rxBuffer,1,p);
}

//-----------------------------------------------------------------------------
// FIFO HANDLING
//-----------------------------------------------------------------------------
/**
 * open and creates the fifo for sniffing
 * @param fifoName
 */
bool CommTh::openFifo(string fifoName)
{
// delete if it exists
this->fifoName=fifoName;
try
	{
	//unlink(fifoName.c_str());
	//fifo=mkfifo (fifoName.c_str(),0666);
	if(fifo<0)
		{
		//cerr << "cannot create FIFO " << fifoName << endl;
		throw false;
		}
	// check if sniffer is present with a non blocking open
	fifo=open(fifoName.c_str(), O_WRONLY | O_NONBLOCK);
	if(fifo<0)
		{
		//cerr << "cannot open FIFO " << fifoName << endl;
		throw false;
		}
	useFifo=true;
	}
catch(...)
	{
	useFifo=false;
	}
return useFifo;
}

/**
 * close the fifo for sniffing
 * @param fifoName
 */
void CommTh::closeFifo()
{
if(useFifo)
	{
	close(fifo);
	remove(fifoName.c_str());
	}
}

/**
 * write data to fifo
 * @param data
 * @param size
 */
void CommTh::writeFifo(uint8_t *data,int size)
{
int ret;
if(useFifo)
	{
	if(fifo!=0)
		{
		ret=write(fifo,data,size);
		fsync(fifo);
		if(ret<0)
			{
			cerr << "error writing FIFO" << endl;
			}
		}
	}
}
//-----------------------------------------------------------------------------
// RX THREAD
//-----------------------------------------------------------------------------
/**
 * create thread
 * @param detach
 * @param size
 * @param which can be 't' for tx or 'r' for rx
 * @return
 */
bool CommTh::createThread(bool detach, int size,char which)
{
int ret;
bool res=true;
pthread_attr_t *_attr;
if(which=='r')
	{
	_attr=&_attrRx;
	}
else
	{
	_attr=&_attrTx;
	}

if ((ret = pthread_attr_init(_attr)) != 0)
	{
	cout << strerror(ret) << endl;
	throw "Error";
	}
if (detach)
	{
	if ((ret = pthread_attr_setdetachstate(_attr, PTHREAD_CREATE_DETACHED)) != 0)
		{
		cout << strerror(ret) << endl;
		throw "Error";
		}
	}
if (size >= PTHREAD_STACK_MIN)
	{
	if ((ret = pthread_attr_setstacksize(_attr, size)) != 0)
		{
		cout << strerror(ret) << endl;
		res=false;
		//throw "Error";
		}
	}
return res;
}

/**
 * start the execution of the thread
 * @param arg (Uses default argument: arg = NULL)
 * @param which can be 't' for tx or 'r' for rx
 */
bool CommTh::startThread(void *arg,char which)
{
bool ret=true;
bool *_started;
void *_arg;
pthread_t *_id;

if(which=='r')
	{
	_started=&startedRx;
	_arg=this->argRx;
	_id=&_idRx;
	}
else
	{
	_started=&startedTx;
	_arg=this->argTx;
	_id=&_idTx;
	}

if (!*_started)
	{
	*_started = true;
	_arg = arg;
	/*
	 * Since pthread_create is a C library function, the 3rd
	 * argument is a global function that will be executed by
	 * the thread. In C++, we emulate the global function using
	 * the static member function that is called exec. The 4th
	 * argument is the actual argument passed to the function
	 * exec. Here we use this pointer, which is an instance of
	 * the Thread class.
	 */
	if(which=='r')
		{
		if ((ret = pthread_create(_id, NULL, &execRx, this)) != 0)
			{
			cout << strerror(ret) << endl;
			//throw "Error";
			ret=false;
			}
		}
	else
		{
		if ((ret = pthread_create(_id, NULL, &execTx, this)) != 0)
			{
			cout << strerror(ret) << endl;
			//throw "Error";
			ret=false;
			}
		}
	}
return ret;
}

/**
 * Allow the thread to wait for the termination status
 * @param which can be 't' for tx or 'r' for rx
 */
void CommTh::joinThread(char which)
{
if(which=='r')
	{
	if(startedRx)
		{
		pthread_join(_idRx, NULL);
		}
	}
else
	{
	if(startedTx)
		{
		pthread_join(_idTx, NULL);
		}
	}
}

/**
 * destroy the thread
 * @param which can be 't' for tx or 'r' for rx
 */
void CommTh::destroyThread(char which)
{
int ret;
pthread_t *_id;
if(which=='r')
	{
	_id=&_idRx;
	}
else
	{
	_id=&_idTx;
	}

pthread_detach(*_id);
pthread_exit(0);

if(!noattrRx)
	{
	if((ret = pthread_attr_destroy(&_attrRx)) != 0)
		{
		cout << strerror(ret) << endl;
		throw "Error";
		}
	}
}

/**
 * Function that is used to be executed by the thread
 * @param thr
 */
void *CommTh::execRx(void *thr)
{
reinterpret_cast<CommTh *>(thr)->runRx();
return NULL;
}

/**
 * Function that is used to be executed by the thread
 * @param thr
 */
void *CommTh::execTx(void *thr)
{
reinterpret_cast<CommTh *>(thr)->runTx();
return NULL;
}
//=============================================================================
///**
// * start the udp debug interface
// * @param ip
// * @param port
// * @return
// */
//bool CommTh::startUDPDebug(string ip,int port)
//{
//bool ret=true;
//if(useUDPDebug && udpDbg!=NULL)
//	{
//	ret &= udpDbg->openUdp(ip,port);
//	ret &= udpDbg->startThread(NULL,'r');
//	}
//return ret;
//}
//-----------------------------------------------------------------------------
// PRINTING
//-----------------------------------------------------------------------------
void CommTh::printRx(uint8_t *buff,int size,rxParserCondition_t fr_error)
{
if(useFifo)
	{
	writeFifo(buff,size);
	}
if(useUDPDebug && udpDbg!=NULL)
	{
	udpDbg->sendMsg(buff,size);
	}
}

void CommTh::printTx(uint8_t *buff,int size)
{
if(useFifo)
	{
	writeFifo(buff,size);
	}
if(useUDPDebug  && udpDbg!=NULL)
	{
	udpDbg->sendMsg(buff,size);
	}
}

