//============================================================================
// Name        : supervisor.cpp
// Author      : L. Mini
// Version     :
// Copyright   : Your copyright notice
// Description : Varco supervisor
//============================================================================

#include <getopt.h>
#include <signal.h>
#include "version.h"
#include "comm/SerCommTh.h"
#include "RXHFrame.h"
#include "TXHFrame.h"
#include "BadgeReader.h"
#include "comm/SktCliCommTh.h"
#include "comm/SktSrvCommTh.h"
#include "comm/UDPCommTh.h"
#include "CommData.h"
#include "common/utils/Trace.h"
#include "common/utils/SimpleCfgFile.h"
#include "db/DBWrapper.h"
#include "Slave.h"
#include "TelnetServer.h"
#include "UDPProtocolDebug.h"
#include "HardwareGPIO.h"

using namespace std;

Trace *dbg;
SerCommTh *serComm;
SktCliCommTh *sktCliComm;
SktSrvCommTh *sktSrvComm;
UDPCommTh *udpSrvComm;
CommTh *comm;
RXHFrame *rf;
TXHFrame *tf;
BadgeReader *br;
CommData *cd;
struct globals_st gd;
SimpleCfgFile *cfg;
DBWrapper *db;
Slave *slave;
TelnetServer *tsrv;
UDPProtocolDebug *udpDbg;
#ifdef RASPBERRY
HardwareGPIO *hwgpio;
#endif

//-----------------------------------------------------------------------------
// PROTOTYPES
//-----------------------------------------------------------------------------
void endingApplication();
void printUsage();
void signal_brkpipe_callback_handler(int signum);
//=============================================================================
int main(int argc, char *argv[])
{
int c;
int ret=0;
string tmp;
TimeFuncs aliveTime;
unsigned int aliveHours=0;

dbg=new Trace(MAX_MESSAGE_TRACES,APP_NAME,NULL);
dbg->set_all(true);

dbg->trace(DBG_NOTIFY,"VarcoLAN SV - ver. %s",VERSION);
dbg->trace(DBG_NOTIFY,"started at "+aliveTime.datetime_now("%D %T"));

aliveTime.initTime_s();

// set some defaults
gd.cfgChanged=false;
gd.myID=0;
gd.brate=0;
gd.device[0]=0;
gd.port=5000;
gd.useSerial=true;
gd.useSocketClient=false;
gd.connected=false;
gd.badgeAutoSend=false;
gd.dbSaveTime=1200;			// [s]
gd.dumpFromMaster=false;
gd.dumpTriggerFromCfg=false;
gd.masterPollingTime=DEF_MASTER_POLLING_TIME;
gd.masterAliveTime=DEF_ALIVE_TIME;
gd.enableDBCommands=false;

//-----------------------------------------------------------------------------
// get configuration file
//-----------------------------------------------------------------------------
cfg=new SimpleCfgFile();
dbg->trace(DBG_NOTIFY,"I'm running in the folder:");
system("pwd");

#ifdef RASPBERRY
dbg->trace(DBG_NOTIFY,"set working directory to:");
chdir(RASPBERRY_WORKING_DIR);
system("pwd");
#endif

if(cfg->loadCfgFile(CFG_FILE))
	{
	string tmp;
	gd.myID=(uint8_t)cfg->getValue_int("MY_ID",MYID);
	gd.defaultDest=(uint8_t)cfg->getValue_int("DEFAULT_DEST","1");

	tmp=cfg->getValueOf("DEVICE");
	strcpy(gd.device,tmp.c_str());

	gd.brate=cfg->getValue_int("BAUD_RATE",BAUDRATE);
	gd.port=cfg->getValue_int("PORT",PORT);

	gd.has_reader=cfg->getValue_bool("HAS_READER", "1");
	tmp=cfg->getValueOf("READER_PORT");
	strcpy(gd.reader_device,tmp.c_str());
	gd.reader_brate=cfg->getValue_int("READER_BAUD_RATE","1200");

	//gd.devAnsTimeout=cfg->getValue_int("TIMEOUT_PER_DEVICE","10");
	gd.devAnsTimeout=ANSWER_TIME_EACH_DEVICE_MS;

	gd.usefifo=cfg->getValue_bool("USE_FIFO", "0");
	gd.fifoName=cfg->getValueOf("FIFO_FILE");

	gd.useTelnet=cfg->getValue_bool("USE_TELNET", "0");
	strcpy(gd.telnetPort,cfg->getValueOf("TELNET_PORT").c_str());
	gd.telnetLatency=cfg->getValue_int("TELNET_LATENCY","10");

	gd.dbRamFolder=cfg->getValueOf("DB_RAM_FOLDER");
	gd.dbPersistFolder=cfg->getValueOf("DB_PERSISTENT_FOLDER");
	gd.maxEventPerTable=cfg->getValue_int("MAX_EVENTS","5000");

	gd.reader_brate=cfg->getValue_int("DB_SAVE_TIME","12000");

	gd.dumpFromMaster=cfg->getValue_bool("DUMP_FROM_MASTER", "0");
	gd.dumpTriggerFromCfg=gd.dumpFromMaster;

	gd.loopLatency=cfg->getValue_int("LOOP_LATENCY","500")*1000;

	gd.masterPollingTime=cfg->getValue_int("POLLING_TIME","500");
	gd.masterAliveTime=cfg->getValue_int("ALIVE_TIME","10");

	gd.useUdpDebug=cfg->getValue_bool("USE_UDP_DEBUG", "0");
	gd.udpDbg_ip=cfg->getValueOf("UDP_DEBUG_IP", "0.0.0.0");
	gd.udpDbg_port=cfg->getValue_int("UDP_DEBUG_PORT", "6001");

	gd.enableDBCommands=cfg->getValue_bool("ENABLE_DB_COMMANDS", "N");
	}
else
	{
	dbg->trace(DBG_NOTIFY,"configuration file not found -> defaults");
	}

//-----------------------------------------------------------------------------
// Handle command line
//-----------------------------------------------------------------------------
while((c = getopt(argc, argv, "d:")) != -1)
	{
	switch(c)
		{
		case 'd':	// delete database table
			db->open();
			db->cleanTable(optarg[0]);
			db->close();
			exit(1);
			break;
//		case 'd':	// device
//			gd.serial_flag = true;
//			strcpy((char*) gd.device, optarg);
//			break;
		default:
			printUsage();
			exit(1);
		}
	}
//-----------------------------------------------------------------------------
// Other inits
//-----------------------------------------------------------------------------
rf=new RXHFrame();
tf=new TXHFrame();
br=new BadgeReader();
cd=new CommData();
db=new DBWrapper(gd.dbPersistFolder+DB_VARCOLANSV,gd.dbRamFolder+DB_VARCOLANEV);
slave=new Slave();
udpDbg=new UDPProtocolDebug();
#ifdef RASPBERRY
//export WIRINGPI_GPIOMEM=1
setenv("WIRINGPI_GPIOMEM","1",1);
sleep(1);
dbg->trace(DBG_NOTIFY,"Enabling Raspberry Pi HW GPIO");
hwgpio=new HardwareGPIO();
HW_GPIO_INIT();
#endif

// database
db->db2Ram();
sleep(1);
db->open();
if(db->loadWeektimes()) dbg->trace(DBG_NOTIFY,"weektimes loaded");
if(db->loadProfiles()) dbg->trace(DBG_NOTIFY,"profiles loaded");
if(db->loadTerminals()) dbg->trace(DBG_NOTIFY,"terminals loaded");

// enable telnet interface
if(gd.useTelnet)
	{
	dbg->trace(DBG_NOTIFY,"Using Telnet for interacting");
	tsrv = new TelnetServer();
	tsrv->initServer(gd.telnetPort,gd.telnetLatency);
	}


//-----------------------------------------------------------------------------
// check for the communication channel
//-----------------------------------------------------------------------------
HW_BLINK_WAIT_NET();
serComm = new SerCommTh();
#ifdef USE_UDP_PROTOCOL
udpSrvComm = new UDPCommTh();
#else
sktSrvComm = new SktSrvCommTh();
#endif

try
	{
#if 1
	if(gd.usefifo)
		{
		// We expect write failures to occur but we want to handle them where
		// the error occurs rather than in a SIGPIPE handler.
		signal(SIGPIPE, signal_brkpipe_callback_handler);
		//signal(SIGPIPE, SIG_IGN);	// will ignore signal
		dbg->trace(DBG_NOTIFY,"opening fifo " + gd.fifoName);
		if(!serComm->openFifo(gd.fifoName))
			{
			dbg->trace(DBG_WARNING,"unable to open fifo " + gd.fifoName + ", sniffer is not present?");
			gd.usefifo=false;
			}
		else
			{
#ifdef USE_UDP_PROTOCOL
			udpSrvComm->setFifoHandler(serComm->getFifoHandler());
#else
			sktSrvComm->setFifoHandler(serComm->getFifoHandler());
#endif
			}
		}
#endif

	if(gd.useUdpDebug)
		{
		dbg->trace(DBG_NOTIFY,"opening Debug UDP @ip %s port %d", gd.udpDbg_ip.c_str(), gd.udpDbg_port);
		if(!udpDbg->openUdp(gd.udpDbg_ip,gd.udpDbg_port))
			{
			dbg->trace(DBG_WARNING,"unable to open the debug UDP interface");
			gd.usefifo=false;
			}
		else
			{
			udpDbg->startThread(NULL,'r');
			serComm->setUDPDebugInterface(udpDbg);
			serComm->setUseUDPDebug(true);

#ifdef USE_UDP_PROTOCOL
			udpSrvComm->setUDPDebugInterface(udpDbg);
			udpSrvComm->setUseUDPDebug(true);
#else
			sktSrvComm->setUDPDebugInterface(udpDbg);
			sktSrvComm->setUseUDPDebug(true);
#endif
			}
		}

	// serial
	if(!serComm->openCommunication(gd.device, gd.brate))
		{
		dbg->trace(DBG_ERROR,"cannot open serial port");
		throw false;
		}
	else
		{
		serComm->setMyId(gd.myID);
		serComm->clearLinkCheck();
		serComm->startThread(NULL,'r');	// start the listener thread
		}

	// server
#ifdef USE_UDP_PROTOCOL
	if(!udpSrvComm->openCommunication(gd.device, gd.port))
		{
		dbg->trace(DBG_ERROR,"cannot open IP socket");
		throw false;
		}
	else
		{
		udpSrvComm->setMyId(gd.myID);
		udpSrvComm->clearLinkCheck();
		udpSrvComm->startThread(NULL,'r');	// start the listener thread
		}
#else
	if(!sktSrvComm->openCommunication(gd.device, gd.port))
		{
		dbg->trace(DBG_ERROR,"cannot open IP socket");
		throw false;
		}
	else
		{
		sktSrvComm->setMyId(gd.myID);
		sktSrvComm->clearLinkCheck();
		sktSrvComm->startThread(NULL,'r');	// start the listener thread
		}
#endif
	dbg->trace(DBG_NOTIFY,"waiting for a CheckLink in Serial or LAN ...");

	gd.useSerial=false;
	gd.useSocketClient=false;
	gd.useSocketServer=false;

	bool netFound=false;
	while(!netFound)
		{
		if(serComm->getLinkCheckedStatus())
			{
			gd.useSerial=true;
			gd.useSocketClient=false;
			gd.useSocketServer=false;
			netFound=true;
			dbg->trace(DBG_NOTIFY,"serial communication found");
			}
#ifdef USE_UDP_PROTOCOL
		if(udpSrvComm->getLinkCheckedStatus())
			{
			gd.useSerial=false;
			gd.useSocketClient=false;
			gd.useSocketServer=true;
			netFound=true;
			dbg->trace(DBG_NOTIFY,"LAN communication (UDP) found");
			}
#else
		if(sktSrvComm->getLinkCheckedStatus())
			{
			gd.useSerial=false;
			gd.useSocketClient=false;
			gd.useSocketServer=true;
			netFound=true;
			dbg->trace(DBG_NOTIFY,"LAN communication (TCP) found");
			}
#endif
		usleep(10000);
		}

	// network found...

	if(!gd.useSerial)
		{
		// close serial
		serComm->setUseFifo(false);
		serComm->closeCommunication();
		//serComm->joinThread('r');
		//serComm->joinThread('t');
		dbg->trace(DBG_NOTIFY,"serial disconnected");
		}

	if(!gd.useSocketServer)
		{
#ifdef USE_UDP_PROTOCOL
		// close server
		udpSrvComm->setUseFifo(false);
		udpSrvComm->closeCommunication();
		//udpSrvComm->joinThread('r');
		//udpSrvComm->joinThread('t');
		dbg->trace(DBG_NOTIFY,"server disconnected");
#else
		sktSrvComm->setUseFifo(false);
		sktSrvComm->closeCommunication();
		sktSrvComm->joinThread('r');
		gd.connected=false;
		dbg->trace(DBG_NOTIFY,"server disconnected");
#endif
		}
	}
catch(bool res)
	{
	dbg->trace(DBG_NOTIFY,"cannot find network");
	gd.run=false;
	gd.usefifo=false;		// to avoid close of a fifo not yet opened
	endingApplication();
	return ret;
	}
//-----------------------------------------------------------------------------

tf->setCommInterface(&comm);

// badge reader
if(gd.has_reader)
	{
	br->init(gd.reader_device,gd.reader_brate);
//	char p[30];
//	br->getBadge(p,20);
//	cout << p << endl;
	}

#if 0
if(gd.usefifo)
	{
	// We expect write failures to occur but we want to handle them where
	// the error occurs rather than in a SIGPIPE handler.
	signal(SIGPIPE, signal_brkpipe_callback_handler);
	//signal(SIGPIPE, SIG_IGN);	// will ignore signal
	dbg->trace(DBG_NOTIFY,"opening fifo " + gd.fifoName);
	if(!comm->openFifo(gd.fifoName))
		{
		dbg->trace(DBG_WARNING,"unable to open fifo " + gd.fifoName + ", sniffer is not present?");
		gd.usefifo=false;
		}
	}
#endif

slave->firmwareLoadData();

gd.run=true;
//-----------------------------------------------------------------------------
// main loop
//-----------------------------------------------------------------------------
HW_BLINK_ALIVE();
while(gd.run)
	{
	slave->mainLoop();
	if(gd.useTelnet)
		{
		tsrv->mainLoop();
		}

	// save cfg file if need
	if(gd.cfgChanged==true)
		{
		if(cfg->saveCfgFile())
			{
			dbg->trace(DBG_NOTIFY,"cfg file saved");
			}
		else
			{
			dbg->trace(DBG_ERROR,"cfg file cannot be saved");
			}
		gd.cfgChanged=false;
		}

	if(aliveTime.getElapsedTime_s()>3600)
		{
		aliveTime.initTime_s();	// reset
		aliveHours++;
		dbg->trace(DBG_NOTIFY,"alive by %u hours (about %u days)",aliveHours,aliveHours/24);
		}
	usleep(gd.loopLatency);
	}
//-----------------------------------------------------------------------------
// ENDING
//-----------------------------------------------------------------------------
endingApplication();
return ret;
}

//=============================================================================

/**
 * routine to be called before ending the application
 */
void endingApplication()
{
if(gd.usefifo)
	{
	comm->closeFifo();
	}

dbg->trace(DBG_NOTIFY,"ending application");
db->close();
db->dbSave();
serComm->closeCommunication();
udpDbg->closeComm();
delete serComm;
#ifdef USE_UDP_PROTOCOL
if(gd.useSocketServer) delete udpSrvComm;
#else
if(gd.useSocketClient) delete sktCliComm;
if(gd.useSocketServer) delete sktSrvComm;
#endif
delete cfg;
delete rf;
delete dbg;
delete br;
delete cd;
delete db;
delete slave;
delete udpDbg;

#ifdef RASPBERRY
delete hwgpio;
#endif

//delete master;
}


/**
 * print the usage of the utility
 */
void printUsage()
{
cout << "-d[p|w|b|e]      delete all data in the table specified\n";
cout << "                 p=profile;w=weektime;b=badge;e=event\n";
//cout << "-p[port]    serial device (i.e. /dev/ttyUSB0)\n";
//cout << "-b[baud]    set the baudrate value\n";
//cout << "-k[ip:port] set the server IP:port i.e. localhost:5000, 192.168.1.10:5000\n";
//cout << "-f[file]    file containing commands\n";
//
//cout << "\nexamples in interactive mode:\n";
//cout << "r.03.01.03\n";
//cout << "c.02.01.21.x[12.34.5.de]d[12.45.99]s[helpme]\n";
//cout << "\nNOTE: if socket mode (param -k) is used, serial parameters are ignored\n";
cout << endl;
}

/* Catch Signal Handler functio */
/**
 * signal handler for broken pipe (tipically used for FIFO in this case
 * @param signum
 */
void signal_brkpipe_callback_handler(int signum)
{
dbg->trace(DBG_WARNING,"Caught signal SIGPIPE %d - fifo turn-off", signum);
gd.usefifo=false;
comm->closeFifo();
}

