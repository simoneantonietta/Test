/*
 *-----------------------------------------------------------------------------
 * PROJECT: varcosv
 * PURPOSE: see module Script.h file
 *-----------------------------------------------------------------------------
 */

#include "Script.h"
#include "dataStructs.h"
#include "comm/app_commands.h"
#include "comm/CommTh.h"
#include "common/utils/Trace.h"
#include "common/utils/Utils.h"
#include "db/DBWrapper.h"
#include "TelnetServer.h"

extern struct globals_st gd;
extern CommTh *comm;
extern Trace *dbg;
extern DBWrapper *db;
extern TelnetServer *tsrv;

Script::Script()
{
// TODO Auto-generated constructor stub

}

Script::~Script()
{
// TODO Auto-generated destructor stub

}

/**
 * executes a script (not bash script but a proprietary one)
 * @param fname
 * @param forceRun
 * @return true: ok
 */
bool Script::runScriptFile(string script_fname, string status_fname, bool forceRun)
{
bool ret = true;
ifstream f;
fstream s;
string line;
bool run = false;

// TODO use database to trigger the script

// check if it must execute the script
if(!forceRun)
	{
	s.open(status_fname.c_str(), ios::in);
	if(s.is_open())
		{
		// read the file
		while(!s.eof())
			{
			nline++;
			getline(s, line);
			trim(line);
			if(line.empty()) continue;
			if(line[0] == '#') continue;
			if(line == "1")
				{
				run = true;
				s.close();
				// reopen in writing mode
				s.open(status_fname.c_str(), ios::out);
				if(s.is_open())
					{
					s << "0" << endl;
					}
				}
			break;
			}
		}
	s.close();
	}
else
	{
	run = true;
	}

nline = 0;
// execute the script
if(run)
	{
	dbg->trace(DBG_NOTIFY, "script execution begin");
	f.open(script_fname.c_str());
	if(f.is_open())
		{
		// read the file
		while(!f.eof())
			{
			getline(f, line);
			trim(line);
			ret = parseScriptLine(line);
			}
		f.close();
		}
	dbg->trace(DBG_NOTIFY,"script execution end");
	}
return ret;
}

/**
 * parse a line and executes commands
 * @param line
 * @param output optional string for output
 * @return true: ok
 */
bool Script::parseScriptLine(string line, char *output, bool isWebLine, unsigned long long rowid)
{
bool ret=true;
vector<string> toks;
Badge_parameters_t bpar;

if(line.empty()) return ret;
if(line[0] == '#') return ret;

gd.expected_glob_mainState=globals_st::sl_unk;
gd.expected_glob_workerState=globals_st::wkr_unk;

// parse commands
try
	{
	//......................................................
	if(startsWith(line,"fw"))
		{
		/*
		 * force firmware upload
		 * fw force varcolan|supply|touch
		 */
		toks.clear();
		Split(line,toks," \t");
		if(toks[1]=="force")
			{
			dbg->trace(DBG_NOTIFY,"SCRIPT: force update firmware for " + toks[2]);
			if(toks[2]=="varcolan")
				{
				// check if file exists
				string fn=_S FIRMWARE_UPD_PATH + _S FIRMWARE_VARCOLAN;
				if(fileExists(fn+FIRMWARE_BIN_EXT) && fileExists(fn+FIRMWARE_TXT_EXT))
					{
					globals_st::dataEvent_t de;
					de.dataEvent=globals_st::dataEvent_t::ev_fw_new_version;
					de.tag.fw_device_type=DEVICE_TYPE_VARCOLAN;
					de.isWebEvent=isWebLine;
					de.rowid=rowid;
					pushEvent(de,0);
					}
				else
					{
					throw 3;
					}
				}
			else
				{
				throw 1;
				}
			}
		else
			{
			throw 100;	// generic syntax error
			}
		}
	//......................................................
	else if(startsWith(line,"badge"))// add or modify a badge
		{
		/*
		 * syntax:
		 *       --------------------  vi st pin    vstart vstop     prof1 prof2 etc
		 * badge 1234567890abcdefffff (0, 0, 00000, now,   tomorrow, 0,    NULL, NULL,NULL,NULL,NULL,NULL,NULL,NULL)
		 * vstart can be "now" or YYYY-MM-DD
		 * vstop can be "tomorrow" or YYYY-MM-DD
		 * profileID the first must be declared, the others are optional
		 */
		int i=0;
		vector<string> toks1;
		string tmp;
		toks.clear();
		Split(line,toks," \t,()");

		if(toks.size()<8)
			{
			throw 4;
			}
		// badge number
		i++;// next field
		if(toks[i].size()!=(BADGE_SIZE*2))
			{
			string spc((BADGE_SIZE*2)-toks[i].size(),'f');
			toks[i]=toks[i]+spc;
			//throw 5;
			}
		int val=0;
		toUpperStr(toks[i]);
		for(unsigned int k=0,j=0;k<toks[i].size();k++)
			{
			(toks[i][k]>='A') ? (val=toks[i][k]-'A'+10) : (val=toks[i][k]-'0');
			if(k&1)
				{
				bpar.Parameters_s.badge[j].part.low=val;
				j++;
				}
			else
				{
				bpar.Parameters_s.badge[j].part.high=val;
				}
			}

		// visitor flag
		i++;// next field
		bpar.Parameters_s.visitor=to_number<int>(toks[i]);
		// badge status
		i++;// next field
		bpar.Parameters_s.badge_status=(Badge_Status_t)to_number<int>(toks[i]);
		//badge bin
		i++;// next field
		bpar.Parameters_s.pin=to_number<int>(toks[i]);
		// validity start
		i++;// next field
		if(toks[i]=="now" || toks[i]=="today")
			{
			time_t rawtime;
			struct tm * timeinfo;
			char buffer [80];

			time (&rawtime);
			timeinfo = localtime (&rawtime);

			strftime (buffer,80,"%F",timeinfo);
			tmp=_S buffer;
			}
		else
			{
			tmp=toks[i];
			}
		toks1.clear();
		Split(tmp,toks1,"-");
		bpar.Parameters_s.start_year=to_number<int>(toks1[0])-2000;
		bpar.Parameters_s.start_month=to_number<int>(toks1[1]);
		bpar.Parameters_s.start_day=to_number<int>(toks1[2]);

		// validity stop
		i++;// next field
		if(toks[i]=="tomorrow")
			{
			time_t rawtime;
			struct tm * timeinfo;
			char buffer [80];

			time (&rawtime);
			rawtime += (60*60*24);	// get tomorrow
			timeinfo = localtime (&rawtime);

			strftime (buffer,80,"%F",timeinfo);
			tmp=_S buffer;
			}
		else
			{
			tmp=toks[i];
			}
		toks1.clear();
		Split(tmp,toks1,"-");
		bpar.Parameters_s.stop_year=to_number<int>(toks1[0])-2000;
		bpar.Parameters_s.stop_month=to_number<int>(toks1[1]);
		bpar.Parameters_s.stop_day=to_number<int>(toks1[2]);

		// profile
		for(int p=0;p<ACTIVE_PROFILE_ARRAY_MAX;p++) bpar.Parameters_s.profilesID[p]=MAX_PROFILES;
		i++;// next field
		int np=0;
		for(int p=toks.size()-i;p>0;p--)
			{
			bpar.Parameters_s.profilesID[np]=to_number<int>(toks[i]);
			i++;
			np++;
			}
		dbg->trace(DBG_NOTIFY,"SCRIPT: add/modify badge %s",toks[1].c_str());
		int id=db->setBadge(bpar);

		// generate event to propagate the new badge
		globals_st::dataEvent_t de;
		de.dataEvent=globals_st::dataEvent_t::ev_badge_data;
		de.tag.badge_id=id;
		de.isWebEvent=isWebLine;
		de.rowid=rowid;
		pushEvent(de,0);
		}
	//......................................................
	else if(startsWith(line,"exe"))
		{
		/*
		 * exe scriptname [params..]
		 */
		if(toks.size()<2) throw 2;
		string cmd=toks[1];
		dbg->trace(DBG_NOTIFY,"SCRIPT: execute shell script " + toks[1]);
		for(unsigned int i=1;i<toks.size();i++)  // concatenate parameters
			{
			cmd+=" " + toks[i];
			}
		system(cmd.c_str());
		}
	//......................................................
	else if(startsWith(line,"clean all badge"))
		{
		globals_st::dataEvent_t de;
		de.dataEvent=globals_st::dataEvent_t::ev_global_deletion;
		pushEvent(de,0);
		}
	//......................................................
	else if(startsWith(line,"disable"))
		{
		/*
		 * disable badgeautosend
		 */
		toks.clear();
		Split(line,toks," \t,()");

		if(toks.size()<2) throw 6;
		if(toks[1]=="badgeautosend")
			{
			gd.badgeAutoSend=false;
			}
		if(toks[1]=="webcommand")
			{
			gd.enableWebCommands=false;
			}
		}
	//......................................................
	else if(startsWith(line,"enable"))
		{
		/*
		 * enable badgeautosend|webcommand
		 */
		toks.clear();
		Split(line,toks," \t,()");

		if(toks.size()<2) throw 6;
		if(toks[1]=="badgeautosend")
			{
			gd.badgeAutoSend=true;
			}
		if(toks[1]=="webcommand")
			{
			gd.enableWebCommands=true;
			}
		}
	//......................................................
	else if(startsWith(line,"reload"))
		{
		/*
		 * reload profiles|weektimes|terminals
		 */
		bool res=false;
		toks.clear();
		Split(line,toks," \t,()");

		if(toks.size()<2) throw 6;
		if(toks[1]=="profiles")
			{
			res=db->loadProfiles();
			}
		else if(toks[1]=="weektimes")
			{
			res=db->loadWeektimes();
			}
		else if(toks[1]=="terminals")
			{
			res=db->loadTerminals();
			}
		else
			{
			throw 100;
			}

		if(output!=NULL)
			{
			(res) ? (strcpy(output,"ok")) : (strcpy(output,"error"));
			}
		// do nothing
		}
	//......................................................
	else if(startsWith(line,"profile"))
		{
		/*
		 * profile 0 active|inactive 0,20,50
		 */
		unsigned int n,ter,ndx;
		toks.clear();
		Split(line,toks," \t,()");

		if(toks.size()<4) throw 6;
		ndx=atoi(toks[1].c_str());	// profile index
		if(ndx<MAX_PROFILES)
			{
			n=3;
			while(n<toks.size())
				{
				ter=atoi(toks[n].c_str());
				if(ter<MAX_TERMINALS)
					{
					if(toks[2]=="active" || toks[2]=="enable")
						{
						gd.profiles[ndx].params.Parameters_s.activeTerminal |= (1UL<<ter);
						}
					else if(toks[2]=="inactive" || toks[2]=="disable")
						{
						gd.profiles[ndx].params.Parameters_s.activeTerminal &= ~(1UL<<ter);
						}
					}
				n++;
				}
			gd.profiles[ndx].params.crc8=CRC8calc((uint8_t *)&gd.profiles[ndx].params.Parameters_s,sizeof(Profile_parameters_t::Parameters_s));
			db->updateProfile(ndx,gd.profiles[ndx].name);	// update in database
			}
		}
	//......................................................
	else if(startsWith(line,"weektime"))
		{
		/**
		 * weektime 0 mon|tue|wed|thu|fri|sat|sun 10:00,12:00 14:00,17:00
		 */
		unsigned int n,ndx;
		uint8_t t;
		toks.clear();
		Split(line,toks," \t,():.");

		if(toks.size()<11) throw 6;
		ndx=atoi(toks[1].c_str());	// weektime index
		if(ndx<MAX_WEEKTIMES)
			{
			int day=dayMap(toks[2]);
			if(day>=0)
				{
				int wd=day*4*2;
				n=3;
				while(n<toks.size())
					{
					t=atoi(toks[n++].c_str());
					gd.weektimes[ndx].params.Parameters_s.week.weekdays[wd++]=t;
					}
				}
			gd.weektimes[ndx].params.crc8=CRC8calc((uint8_t *)&gd.weektimes[ndx].params.Parameters_s,sizeof(Weektime_parameters_t::Parameters_s));
			db->updateWeektime(ndx,gd.weektimes[ndx].name);	// update in database
			}
		}
	//......................................................
	else if(startsWith(line,"set"))
		{
		/*
		 * see HPROT_SUPERVISOR_CMD_BASE data to identify ports
		 * set ID n_port 0|1|2
		 * 2=(timed)
		 */
		toks.clear();
		Split(line,toks," \t,():.");

		if(toks.size() == 4)
			{
			globals_st::dataEvent_t de;
			de.dataEvent=globals_st::dataEvent_t::ev_set_output;
			de.tag.params[0]=(uint8_t)to_number<int>(toks[1]);
			de.tag.params[1]=(uint8_t)to_number<int>(toks[2]);
			de.tag.params[2]=(uint8_t)to_number<int>(toks[3]);
			de.isWebEvent=isWebLine;
			de.rowid=rowid;
			pushEvent(de,0);
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"mac"))
		{
		/*
		 * set the mac address to the ID device
		 * mac ID xx.xx.xx.xx.xx.xx
		 */
		toks.clear();
		Split(line,toks," \t.:");

		if(toks.size() == 8)
			{
			globals_st::dataEvent_t de;
			de.dataEvent=globals_st::dataEvent_t::ev_mac_address;
			de.tag.params[0]=(uint8_t)to_number<int>(toks[1]);	// id
			de.tag.params[1]=(uint8_t)strtol(toks[2].c_str(),NULL,16);
			de.tag.params[2]=(uint8_t)strtol(toks[3].c_str(),NULL,16);
			de.tag.params[3]=(uint8_t)strtol(toks[4].c_str(),NULL,16);
			de.tag.params[4]=(uint8_t)strtol(toks[5].c_str(),NULL,16);
			de.tag.params[5]=(uint8_t)strtol(toks[6].c_str(),NULL,16);
			de.tag.params[6]=(uint8_t)strtol(toks[7].c_str(),NULL,16);
			de.isWebEvent=isWebLine;
			de.rowid=rowid;
			pushEvent(de,de.tag.params[0]);
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"ip"))
		{
		/*
		 * set the ip address to the ID device
		 * ip ID ddd.ddd.ddd.ddd
		 */
		toks.clear();
		Split(line,toks," \t.:");

		if(toks.size() == 6)
			{
			globals_st::dataEvent_t de;
			de.dataEvent=globals_st::dataEvent_t::ev_ip_address;
			de.tag.params[0]=(uint8_t)to_number<int>(toks[1]);	// id
			de.tag.params[1]=(uint8_t)to_number<int>(toks[2]);
			de.tag.params[2]=(uint8_t)to_number<int>(toks[3]);
			de.tag.params[3]=(uint8_t)to_number<int>(toks[4]);
			de.isWebEvent=isWebLine;
			de.rowid=isWebLine;
			pushEvent(de,de.tag.params[0]);
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"masterdump"))
		{
		/*
		 * start the master ID data dump
		 * masterdump ID
		 */
		toks.clear();
		Split(line,toks," \t");

		if(toks.size() == 2)
			{
			globals_st::dataEvent_t de;
			de.dataEvent=globals_st::dataEvent_t::ev_memory_dump;
			de.tag.params[0]=(uint8_t)to_number<int>(toks[1]);	// id
			de.isWebEvent=isWebLine;
			de.rowid=rowid;
			pushEvent(de,de.tag.params[0]);
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"termlist"))
		{
		/*
		 * force the request of terminal list
		 * NOTE: from web this start all procedure to retrieve list and data
		 */
		globals_st::dataEvent_t de;
		de.dataEvent=globals_st::dataEvent_t::ev_terminal_list;
		de.isWebEvent=isWebLine;
		de.rowid=rowid;
		if(isWebLine)
			{
			gd.expected_glob_mainState=globals_st::sl_terminal_request;
			gd.expected_glob_workerState=globals_st::wkr_term_param_end;
			}
		pushEvent(de,0);
		}
	//......................................................
	else if(startsWith(line,"termdata"))
		{
		/*
		 * force the request of terminal data
		 * terminaldata ID
		 */
		toks.clear();
		Split(line,toks," \t");

		if(toks.size() == 2)
			{
			globals_st::dataEvent_t de;
			de.dataEvent=globals_st::dataEvent_t::ev_terminal_data_req;
			de.tag.params[0]=(uint8_t)to_number<int>(toks[1]);	// id
			de.isWebEvent=isWebLine;
			de.rowid=rowid;
			pushEvent(de,0);
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"webcmd"))
		{
		/*
		 * this permits to emulate a web command
		 * webcmd[command]
		 * NOTE: no space or other chars between webcmd and [
		 */
		toks.clear();
		Split(line,toks,"[]");

		if(toks.size() == 2)
			{
			gd.simWeb_trigger=true;
			gd.simWeb_command=toks[1];
			}
		else
			{
			throw 6;
			}
		}
	//......................................................
	else if(startsWith(line,"list"))
		{
		/*
		 * request of some listings for info
		 * list <master>
		 */
		toks.clear();
		Split(line,toks," \t");

		if(toks.size() == 2 && output != NULL)
			{
			if(toks[1]=="master")
				{
				for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
					{
					char tmp[6];
					sprintf(tmp,"%d.",it->first);
					strcat(output,tmp);
					}
				}
			}
		}
	//......................................................
	else if(startsWith(line,"logout"))
		{
		tsrv->closeClientConnection(tsrv->getActualClient());
		}
	//......................................................
	else if(startsWith(line,"test"))
		{
		if(output!=NULL)
			{
			strcpy(output,"ok");
			}
		}
	//......................................................
	//......................................................
	else
		{
		throw 100;	// generic syntax error
		}
	}
catch(int error_no)
	{
	ret=false;
	switch(error_no)
		{
		case 1:
		dbg->trace(DBG_ERROR,"SCRIPT: unknown device to update @line %d",nline);
		break;
		case 2:
		dbg->trace(DBG_ERROR,"SCRIPT: SYNTAX: exe without script name  @line %d",nline);
		break;
		case 3:
		dbg->trace(DBG_ERROR,"SCRIPT: firmware not found");
		break;
		case 4:
		dbg->trace(DBG_ERROR,"SCRIPT: not enough fields in badge definition @line %d",nline);
		break;
		case 5:
		dbg->trace(DBG_ERROR,"SCRIPT: wrong badge number length  @line %d",nline);
		break;
		case 6:
		dbg->trace(DBG_ERROR,"SCRIPT: not enough fields (%d)",nline,toks.size());
		break;

		case 100:
		dbg->trace(DBG_ERROR,"SCRIPT: SYNTAX error @line %d",nline);
		break;
		}
	}
return ret;
}

//-----------------------------------------------------------------------------
// PRIVATE
//-----------------------------------------------------------------------------
int Script::dayMap(string day)
{
//mon|tue|wed|thu|fri|sat|sun
if(startsWith(day,"mon") || startsWith(day,"lu"))
	{
	return 0;
	}
else if(startsWith(day,"tue") || startsWith(day,"ma"))
	{
	return 1;
	}
else if(startsWith(day,"wed") || startsWith(day,"me"))
	{
	return 2;
	}
else if(startsWith(day,"thu") || startsWith(day,"gi"))
	{
	return 3;
	}
else if(startsWith(day,"fri") || startsWith(day,"ve"))
	{
	return 4;
	}
else if(startsWith(day,"sat") || startsWith(day,"sa"))
	{
	return 5;
	}
else if(startsWith(day,"sun") || startsWith(day,"do"))
	{
	return 6;
	}
else
	return -1;
}
