//============================================================================
// Name        : gpsnif.cpp
// Author      : Luca
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <getopt.h>

#include "WrapPicoc.h"
#include "common/utils/Utils.h"
#include "common/utils/Trace.h"
#include "common/utils/SimpleCfgFile.h"
#include "comm/SerCommTh.h"
#include "comm/FifoCommTh.h"
#include "comm/SktCliCommTh.h"
#include "comm/SktSrvCommTh.h"
#include "comm/UDPCommTh.h"
#include "RXHFrame.h"
#include "TXHFrame.h"
#include "GuiMainWindow.h"

#define EXECMD_SINGLE				0
#define EXECMD_CONNECT			1
#define EXECMD_EXE					2
#define EXECMD_DISCONNECT		3


using namespace std;

struct globals_st gd;
Trace *dbg;
SerCommTh *serComm;
SktCliCommTh *sktCliComm;
SktSrvCommTh *sktSrvComm;
UDPCommTh *udpSrvComm;
FifoCommTh *fifoComm;
SimpleCfgFile *cfg;
RXHFrame *rf;
TXHFrame *tf;
WrapPicoc *wp;

GuiMainWindow *guiMain;

// picoc Wrapper
double WP_ReturnFValue[WP_VALUES_MAX_SIZE];
int WP_ReturnIValue[WP_VALUES_MAX_SIZE];
uint8_t WP_frameData[HPROT_BUFFER_SIZE];
int WP_sizeFrameData;
char WP_message[WP_MESSAGE_LEN];
//-----------------------------------------------------------------------------
// PROTOTYPES
//-----------------------------------------------------------------------------
void endingApplication();
void printUsage();
string singleCommand(string cmd, int timeout, int mode);
string runFileCommands(string fname);

extern "C"
{
void simplePrintMessage(const char *from, const char *);
}

#define NELEM 15
//uint8_t b[NELEM*2+2]={12,3,45,123,0,1,2,55,190,200,255,25,98,99,1};;
uint8_t btest1[NELEM*2+2]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14};
uint8_t btest2[NELEM*2+2]={0,0,0,0,0,0,0,0,0,0,00,00,00,00,00};

//=============================================================================
int main(int argc, char *argv[])
{
int c;
string tmp;

dbg=new Trace(MAX_MESSAGE_TRACES,APP_NAME,NULL);
dbg->set_all(true);

// set some defaults
gd.myID=0;
gd.brate=0;
gd.cmd_fname[0]=0;
gd.device[0]=0;
gd.port=5000;
gd.interface=globals_st::if_serial;
gd.logmode_flag=true;
gd.connected=false;
gd.rxFrameCounter=0;
gd.txFrameCounter=0;
gd.reducedSize=false;
gd.cli_mode=false;
gd.cli_timeout=2000;
gd.cli_command_fname="";
gd.cli_file=false;

rf=new RXHFrame();
tf=new TXHFrame();
wp=new WrapPicoc();

protocolData_st pd;
pd.cryptoData.cryprev=HPROT_CRYPT_INITIAL;
pd.cryptoData.keyptr=HPROT_CRYPT_KPTR_INITIAL;
for(int i=1;0<NELEM;i++)
	{
	btest2[i]=hprot_crypt(btest1[i],pd.cryptoData.cryprev,pd.cryptoData.key[pd.cryptoData.keyptr]);
	pd.cryptoData.keyptr++;
	pd.cryptoData.keyptr %= HPROT_CRYPT_KEY_SIZE;
	}

for(int i=1;0<NELEM;i++)
	{
	btest1[i]=0;
	}
pd.cryptoData.cryprev=HPROT_CRYPT_INITIAL;
pd.cryptoData.keyptr=HPROT_CRYPT_KPTR_INITIAL;
for(int i=1;0<NELEM;i++)
	{
	btest1[i]=hprot_decrypt(btest2[i],pd.cryptoData.cryprev,pd.cryptoData.key[pd.cryptoData.keyptr]);
	pd.cryptoData.keyptr++;
	pd.cryptoData.keyptr %= HPROT_CRYPT_KEY_SIZE;
	}

//-----------------------------------------------------------------------------
// Handle command line
//-----------------------------------------------------------------------------
while((c = getopt(argc, argv, "mc:i:I:t:")) != -1)
	{
	switch(c)
		{
		case 'm': // mute mode
			dbg->set_all(false);
			break;
		case 'c':	// command filename
			gd.cmd_fname=_S optarg;
			break;
//		case 'd':	// device
//			gd.serial_flag = true;
//			strcpy((char*) gd.device, optarg);
//			break;
		case 'I': // command line mode (file)
			gd.cli_mode=true;
			gd.cli_file=true;
			gd.cli_command_fname=_S optarg;
			break;
		case 'i': // command line mode
			gd.cli_file=false;
			gd.cli_mode=true;
			gd.cli_command=_S optarg;
			break;
		case 't':
			gd.cli_timeout=atol(optarg);
			break;

		default:
			printUsage();
			abort();
		}
	}

//-----------------------------------------------------------------------------
// get configuration file
//-----------------------------------------------------------------------------
cfg=new SimpleCfgFile();
if(cfg->loadCfgFile(CFG_FILE))
	{
	string tmp;
	gd.myID=(uint8_t)cfg->getValue_int("MY_ID",MYID);
	gd.defaultDest=(uint8_t)cfg->getValue_int("DEFAULT_DEST","1");

	tmp=cfg->getValueOf("DEVICE");
	strcpy(gd.device,tmp.c_str());

	gd.brate=cfg->getValue_int("BAUD_RATE",BAUDRATE);
	gd.port=cfg->getValue_int("PORT",PORT);

	gd.dumpTrigger=cfg->getValue_int("DUMP_TRIGGER","40");

	gd.logBinaryFormat=cfg->getValueOf("LOG_BINARY_FORMAT")[0];
	gd.logRawBin_fname=cfg->getValueOf("LOG_BINARY");
	gd.logRawTxt_fname=cfg->getValueOf("LOG_RAW");
	gd.logParsTxt_fname=cfg->getValueOf("LOG_PARSED");
	gd.logRawTxt_endline=cfg->getValue_bool("LOG_RAW_ENDLINE","N");

	gd.reducedSize=cfg->getValue_bool("GUI_REDUCED_SIZE","N");

	gd.cmd_fname=cfg->getValueOf("COMMANDS_FNAME");
	gd.fil_fname=cfg->getValueOf("FILTERS_FNAME");

	for(int k=0;k<SCRIPTS_N;k++)
		{
		tmp = "SCRIPT" + to_string(k+1) + ".";
		wp->scriptSetup(k,cfg->getValueOf(tmp+"EXE"),cfg->getValueOf(tmp+"TRIGGER"),cfg->getValue_bool(tmp+"ENABLE"));
		}

	for(int k=0;k<SPARE_BUTTONS_N;k++)
		{
		tmp = "BUTTON" + to_string(k+1) + ".";
		gd.spareButton[k].enable=cfg->getValue_bool(tmp+"ENABLE");
		gd.spareButton[k].name=cfg->getValueOf(			tmp+"NAME");
		gd.spareButton[k].tooltip=cfg->getValueOf(	tmp+"TOOLTIP");
		gd.spareButton[k].exe=cfg->getValueOf(			tmp+"EXE");
		toLowerStr(gd.spareButton[k].exe);
		}
	}
else
	{
	dbg->trace(DBG_NOTIFY,"configuration file not found -> defaults");
	}

//-----------------------------------------------------------------------------
// Other inits
//-----------------------------------------------------------------------------

serComm = new SerCommTh();
sktCliComm = new SktCliCommTh();
sktSrvComm = new SktSrvCommTh();
udpSrvComm = new UDPCommTh();
fifoComm = new FifoCommTh();

// setup
(gd.logBinaryFormat=='B') ? (serComm->setLogModeBinary(true)) : (serComm->setLogModeBinary(false));
serComm->setLogFilename(gd.logRawBin_fname);
rf->setLogFilename(gd.logRawTxt_fname);

(gd.logBinaryFormat=='B') ? (sktCliComm->setLogModeBinary(true)) : (sktCliComm->setLogModeBinary(false));
sktCliComm->setLogFilename(gd.logRawBin_fname);

// load map files
rf->loadDbgMessageMap(DBGMSG_MAP_FILE);
rf->loadDbgVariableMap(SBGMSG_VAR_FILE);
rf->loadDbgCommandMap(CMDMSG_MAP_FILE);
//-----------------------------------------------------------------------------
// GUI initialization
//-----------------------------------------------------------------------------

checkDeviceType(gd.device);
tf->setCommInterface();

if(gd.cli_mode)
	{
	// command line mode
	if(gd.cli_file)
		{
		// file mode
		cout << runFileCommands(gd.cli_command_fname) << endl;
		}
	else
		{
		// immediate mode
		cout << singleCommand(gd.cli_command,gd.cli_timeout,EXECMD_SINGLE) << endl;
		}
	}
else
	{
	// graphical mode
	guiMain = new GuiMainWindow();
	guiMain->render(argc,argv);
	guiMain->setLogFilename(gd.logParsTxt_fname);

	return Fl::run();
	}
endingApplication();
}

//=============================================================================

/**
 * routine to be called before ending the application
 */
void endingApplication()
{
dbg->trace(DBG_NOTIFY,"ending application");
serComm->closeCommunication();
fifoComm->closeCommunication();
sktCliComm->closeCommunication();
sktSrvComm->closeCommunication();
delete serComm;
delete sktCliComm;
delete guiMain;
delete wp;
delete cfg;
delete rf;
delete dbg;
}

/**
 * determines the device type for the communication
 * @param dev device string
 * @return
 */
int checkDeviceType(const char *dev)
{
int ret=DEV_TYPE_UNKNOWN;
bool isIP=false, isSrv=false, isUdp=false;
vector<string> toks;

if(strlen(dev)>0)
	{
	// check the tipology
	if(strcmp(dev,"localhost")==0)
		{
		isIP=true;
		}
	else if(strcmp(dev,"server")==0)
		{
		isSrv=true;
		}
	else if(strcmp(dev,"udp")==0)
		{
		isUdp=true;
		}
	else
		{
		string _dev(dev);
		Split(_dev,toks,".");
		if(toks.size()==4)	// possibly is an IP address
			{
			isIP=true;
			FOR_EACH(it,string,toks)
				{
				isIP &= IsIntNumber(*it);
				}
			}
		}

	if(isIP)
		{
		gd.interface=globals_st::if_socket_cli;
		ret=DEV_TYPE_SOCKET;
		}
	else if (isSrv)
		{
		gd.interface=globals_st::if_socket_srv;
		ret=DEV_TYPE_SOCKET;
		}
	else if (isUdp)
		{
		gd.interface=globals_st::if_socket_udp;
		ret=DEV_TYPE_SOCKET;
		}
	else
		{
		if(dev[0]==':')	// fifo specifier
			{
			gd.interface=globals_st::if_fifo;
			ret=DEV_TYPE_FIFO;
			}
		else
			{
			gd.interface=globals_st::if_serial;
			ret=DEV_TYPE_SERIAL;
			}
		}
	}
return ret;
}

/**
 * print the usage of the utility
 */
void printUsage()
{
cout << "-c[file]    load the specified command file\n";
cout << "-I[cmdfile] command line mode: specify the file contains commands";
cout << "-i[cmd]     command line mode where [cmd] is the command to send\n";
cout << "            examples in interactive mode:\n";
cout << "            r.03.01.03\n";
cout << "            c.02.01.21.x[12.34.5.de]d[12.45.99]s[helpme]\n";
cout << "-t          timeout in command line mode [ms]\n";
cout << "-m          disable debug messages\n";
cout << endl;
}

/**
 * print a message in the log, typically called from the script
 * @param from the routine that called it
 * @param m message
 */
void simplePrintMessage(const char *from, const char *m)
{
string s="%%s" + _S from + _S m;
guiMain->printLog(s.c_str());
}

/**
 * executes a file filled with commands
 * format of the file
 * [command] @[timeout]
 * @param fname
 * @return string of al results commands
 */
string runFileCommands(string fname)
{
ifstream f;
int nline=0;
string line,result;
vector<string> toks;

f.open(fname.c_str(),ios::in);
// read the file
if(f.good())
	{
	singleCommand("",0,EXECMD_CONNECT);
	while (!f.eof())
		{
		toks.clear();
		nline++;
		getline(f, line);
		trim(line);
		if(line.empty()) continue;
		if(line[0]=='#') continue;
		Split(line,toks,"@ \t");
		if(toks.size()>0)
			{
			gd.cli_timeout=1000;
			if(toks.size()==2)
				{
				gd.cli_timeout=atoi(toks[1].c_str());
				}
			result += singleCommand(toks[0],gd.cli_timeout,EXECMD_EXE);
			}
		}
	singleCommand("",0,EXECMD_DISCONNECT);
	}
else
	{
	cout << "ERROR: file not found" << endl;
	}

return result;
}
/**
 * used for non interactive mode to send command or request
 * @param cmd
 * @param timeout [ms]
 * @param mode 0 single comand: connect, exe,disconnect; 1=connect only; 2=exe; 3=disconnect
 * @return answer
 */
string singleCommand(string cmd, int timeout, int mode)
{
string ret = "";
frame_t f;

tf->setCommInterface();
trim(cmd);
// open communication
try
	{
	if(mode==EXECMD_SINGLE || mode==EXECMD_CONNECT)
		{
		switch(gd.interface)
			{
			//..............................
			case globals_st::if_fifo:
				ret = "ERROR WRONG CHANNEL";
				throw 2;
				break;
			//..............................
			case globals_st::if_serial:
				dbg->trace(DBG_NOTIFY, _S "opening serial port: " + _S gd.device + " baud: " + to_string(gd.brate));
				if(!serComm->openCommunication(gd.device, gd.brate))
					{
					dbg->trace(DBG_ERROR,"cannot open serial port");
					throw 1;
					}
				serComm->startThread(NULL,'r');	// start the listener thread
				gd.connected=true;
				dbg->trace(DBG_NOTIFY,"connected");
				break;
			//..............................
			case globals_st::if_socket_cli:
				dbg->trace(DBG_NOTIFY, _S "opening IP socket: " + _S gd.device + " port: " + to_string(gd.port));
				if(!sktCliComm->openCommunication(gd.device, gd.port))
					{
					dbg->trace(DBG_ERROR,"cannot open IP socket");
					throw 1;
					}
				sktCliComm->startThread(NULL,'r');	// start the listener thread
				gd.connected=true;
				dbg->trace(DBG_NOTIFY,"connected");
				break;
			//..............................
			case globals_st::if_socket_srv:
				ret = "ERROR NOT IMPLEMENTED";
				throw 2;
				break;
			}
		}
	//----------------------------------
	// send and receive
	if(mode==EXECMD_SINGLE || mode==EXECMD_EXE)
		{
		rf->setPrintEnable(true);
		tf->parseDescFrame(cmd);
		tf->setTimeout(timeout);
		tf->transmitFrame();
		while(tf->isWaiting()) usleep(10000);
//		if(cmd[0]=='r')
			{
			while(!rf->isEmptyQueue())
				{
				// it has some data
				RXHFrame::qdata_t q;
				rf->getQueue(&q);
				//if(q.data[0]!=HPROT_HDR_REQUEST)	// avoid my request
					{
					ret += "=>" + rf->frameParseCmdBuilder(q.data,q.size,q.fr_error) + "\n";
					}
				}
			tf->resetResult();
			}
		}
	//----------------------------------
	// close communication
	if(mode==EXECMD_SINGLE || mode==EXECMD_DISCONNECT)
		{
		switch(gd.interface)
			{
			//..............................
			case globals_st::if_fifo:
				ret = "ERROR WRONG CHANNEL";
				throw 2;
				break;
			//..............................
			case globals_st::if_serial:
				serComm->closeCommunication();
				serComm->joinThread('r');
				gd.connected=false;
				dbg->trace(DBG_NOTIFY,"disconnected");
				break;
			//..............................
			case globals_st::if_socket_cli:
				sktCliComm->closeCommunication();
				sktCliComm->joinThread('r');
				gd.connected=false;
				dbg->trace(DBG_NOTIFY,"disconnected");
				break;
			//..............................
			case globals_st::if_socket_srv:
				ret = "ERROR NOT IMPLEMENTED";
				throw 2;
				break;
			}
		}
	}
catch(int e)
	{
	if(e==1) ret += "ERROR CONNECTION";
	}
return ret;
}
