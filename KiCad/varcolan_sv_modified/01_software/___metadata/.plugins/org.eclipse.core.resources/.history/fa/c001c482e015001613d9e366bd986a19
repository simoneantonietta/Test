
#ifndef GLOBAL_H_
#define GLOBAL_H_

//-----------------------------------------------------------------------------
// C section
//-----------------------------------------------------------------------------

#include <string.h>
#include <stdint.h>
#include <unistd.h>
#include <queue>
#include <map>
#include "version.h"
#include "dataStructs.h"
#include "common/prot6/hprot.h"
#include "common/utils/CircularBuffer.h"
#include "common/utils/TimeFuncs.h"

//#include "macros.h"

#define APP_NAME 						"VarcoSV"
#define APP_VERSION					" ver. 1.0"

//-----------------------------------------------------------------------------
// C++ section
//-----------------------------------------------------------------------------
#if __cplusplus
//-----------------------------------------------------------------------------

#include <string>

#define MAX_MESSAGE_TRACES 	20
#define DBG_ERROR 					TRACECLASS_ERROR
#define DBG_WARNING					TRACECLASS_WARN
#define DBG_FATAL 					TRACECLASS_FATAL
#define DBG_NOTIFY 					TRACECLASS_NOTIFY
#define DBG_DEBUG						TRACECLASS_DEBUG
#define DBG_SKTCLIENT				TRACECLASS_CUSTOM_MIN+0
#define DBG_SKTCLIENT_DATA	TRACECLASS_CUSTOM_MIN+1

#define RASPBERRY_WORKING_DIR				"/data"

#define CFG_FILE						"varcosv.cfg"
#define BAUDRATE						"115200"
#define PORT								"5000"
#define MYID 								"10"

#define DB_VARCOLANSV				"varcolan.db"
#define DB_VARCOLANEV				"varcolan_events.db"
#define DB_EVENT_BKP_PATH		"./database_bkp/"

#define DEV_TYPE_UNKNOWN					0
#define DEV_TYPE_SOCKET						1
#define DEV_TYPE_SERIAL						2

#define MAX_NAME_SIZE							32

#define MAX_CIRC_BUFF_SIZE				10
#define MAX_EVENT_TAG_PARAMS			10

/*
 * firmware archive filename format:
 * type_majorminor.tar
 * i.e.: varcolan_0102.tar
 */
#define FIRMWARE_CHECK_TIME		10				// [sec]
#define FIRMWARE_NEW_PATH			"./firmware_new/"
#define FIRMWARE_UPD_PATH			"./firmware/"
#define FIRMWARE_UNPACKER			"unpkg.sh"
#define FIRMWARE_PKG_EXT			".tar"
#define FIRMWARE_BIN_EXT			".bin"
#define FIRMWARE_TXT_EXT			".txt"
#define FIRMWARE_VARCOLAN			"varcolan"
#define FIRMWARE_SUPERVISOR		"supervisor"
#define FIRMWARE_SUPPLY				"supply"
#define FIRMWARE_DISPLAY			"display"

#define SCRIPT_CHECK_TIME			15				// [sec]
#define SCRIPT_PATH						"./script/"
#define SCRIPT_FILENAME				SCRIPT_PATH "runme.cmd"
#define SCRIPT_STATUS_FNAME		SCRIPT_PATH "status.cmd"

using namespace std;

/*
 * global data
 */
struct globals_st
{
	uint8_t myID;
	uint8_t defaultDest;
	int port;
	int brate;
	bool useSerial, useSocketClient, useSocketServer;
	char device[80];	// contain serial port or the server IP address
	bool connected;
	bool run;
	int loopLatency; // [us]

	bool dumpFromMaster;
	bool dumpTriggerFromCfg;
	bool cfgChanged;

	bool enableWebCommands;

	// fifo for sniffing
	bool usefifo;
	string fifoName;

	// telnet for interaction
	bool useTelnet;
	char telnetPort[10];
	int telnetLatency;

	// badge reader
	bool has_reader;
	char reader_device[80];
	int reader_brate;

	// some functional flags
	bool badgeAutoSend;

	// db handling
	string dbRamFolder,dbPersistFolder;
	int dbSaveTime;
	int maxEventPerTable;

	bool simWeb_trigger;
	string simWeb_command;

	//............................
	// weektimes
	typedef struct
	{
		Weektime_parameters_t params;
		char name[MAX_NAME_SIZE];
	} weektime_t;
	weektime_t weektimes[MAX_WEEKTIMES];
	uint8_t globWeektimesCRC;
	//............................
	// profiles
	typedef struct
	{
		Profile_parameters_t params;
		char name[MAX_NAME_SIZE];
	} profile_t;
	profile_t profiles[MAX_PROFILES];
	uint8_t globProfilesCRC;
	//............................
	// terminals
	typedef struct
	{
		Terminal_parameters_to_send_t params;
		char name[MAX_NAME_SIZE];
	} terminal_t;
	terminal_t terminals[MAX_TERMINALS];
	//............................

	//............................

	uint16_t devAnsTimeout;	// time for each device to answer
//	frame_t frame;
//	uint8_t frameData[HPROT_PAYLOAD_SIZE];

	//----------------------------------------------
	// protocol message queue
	typedef struct frameData_st
	{
		enum channel_e {chan_unk,chan_serial,chan_ethernet} channel;
		frame_t frame;
		uint8_t frameData[HPROT_PAYLOAD_SIZE];
		int client;

		frameData_st()
		{
		channel=chan_unk;
		client=-1;
		frame.data=frameData;
		}
	} frameData_t;
	queue<frameData_t> frameQueue;
	//----------------------------------------------
	// data events, and queue for each master connected
	typedef struct dataEvent_st
	{
		enum
		{
			ev_none								= sv_none									,
			ev_weektime_data_error= sv_weektime_data_error	,
			ev_profile_data_error	= sv_profile_data_error		,
			ev_badge_data					= sv_badge_data						,
			ev_terminal_data_upd	= sv_terminal_data_upd		,
			ev_new_time						= sv_new_time							,
			ev_fw_version_req			= sv_fw_version_req				,
			ev_fw_new_version			= sv_fw_new_version				,
			ev_global_deletion		= sv_global_deletion			,
			ev_terminal_list			= sv_present_terminals_req,
			ev_set_output					= sv_drive_outputs				,
			ev_mac_address 				= sv_mac_address					,
			ev_ip_address 				= sv_ip_address						,
			ev_memory_dump 				= sv_memory_dump					,
			ev_terminal_data_req	= sv_terminal_data_req		,

		} dataEvent;
		/*
		 * tag data: each event can transport some simple data
		 */
		union
		{
		int badge_id;
		int weektime_id;
		int terminal_id;
		uint8_t params[10];	// general parameters used i.e. for output direct drive
		uint8_t fw_device_type;
		} tag;

		bool isWebEvent;
		unsigned long long rowid;

		dataEvent_st()
		{
		dataEvent=ev_none;
		isWebEvent=false;
		rowid=0;
		}
	} dataEvent_t;

	//................................
	// main state machine
	enum slaveStates_e
	{
		sl_unk,
		sl_idle,
		sl_terminal_request,
		sl_master_dump,
		sl_sv_fw_upd,
		sl_varco_fw_upd,
		sl_supply_mon_fw_upd,
		sl_display_fw_upd,
	};

	//................................
	// workers various states. Put here all states of all workers
	enum workerStates_e
	{
		wkr_unk,
		wkr_idle,

		wkr_nterm_req,
		wkr_nterm_wait,
		wkr_term_param_req,
		wkr_term_param_wait,
		wkr_term_param_end,
	};
	//................................

	/*
	 * this struct hold all data for each device connected that
	 * must be in relation with a single device
	 * index is the ID of the device -1
	 */
	typedef struct dataDevice_st
	{
	TimeFuncs timeout;
	circular_buffer<globals_st::dataEvent_t> *dataEventQueue;	// each device has its queue
	enum slaveStates_e mainState;			// main state machine
	enum workerStates_e workerState;	// worker state machine

	// application specific data
	int badgeIDindex; // use to sync all badges
	struct terminalsData_st
		{
			uint8_t terminalsPresent[MAX_TERMINALS];
			int ndx;
		} terminalsData;

	 /*
	 * ctor
	 */
	dataDevice_st()
		{
		badgeIDindex=1;
		mainState=sl_idle;
		workerState=wkr_idle;
		memset(terminalsData.terminalsPresent,0,MAX_TERMINALS);
		//dataEventQueue=new circular_buffer<globals_st::dataEvent_t>(MAX_CIRC_BUFF_SIZE);
		}
	} dataDevice_t;

	// global status, reflect the status of all masters, if equal, but if differs them contains xxx_unk status
	enum slaveStates_e glob_mainState, expected_glob_mainState;
	enum workerStates_e glob_workerState, expected_glob_workerState;

	// active master list
	map<int,dataDevice_st> deviceList;
	typedef map<int,dataDevice_t>::iterator iddevice_t;

	//----------------------------------------------

	/**
	 * ctor of global data
	 */
	globals_st()
	{
	}
};

/*
 * generic result class
 */
struct Result
{
public:
#define MAX_MESSAGE_SIZE		256
	enum status_e
	{
		is_unknown,
		is_waiting,
		is_ok,
		is_error
	} status;

	int value;
	//std::string message;
	char message[MAX_MESSAGE_SIZE];

	void reset() {status=is_unknown;value=0;message[0]=0;}
	void setStatus(status_e st) {status=st;}
	status_e getStatus() {return status;}

	void setError(int val=0) {status=is_error;value=val;}
	void setError(const char* msg,int val=0)
		{
		status=is_error;
		strcpy(message,msg);
		value=val;
		}
	void setOK(const char *msg,int val=0)
		{
		status=is_ok;
		strcpy(message,msg);
		value=val;
		}
	void setOK(int val=0) {status=is_ok;value=val;}
	void setWaiting(int val=0) {status=is_waiting;value=val;}

	bool isError() {return (status==is_error) ? (true) : (false);}
	bool isOK() {return (status==is_ok) ? (true) : (false);}
	bool isUnknown() {return (status==is_unknown) ? (true) : (false);}
	bool isWaiting() {return (status==is_waiting) ? (true) : (false);}
};

//-----------------------------------------------------------------------------
// PROTOTYPES
//-----------------------------------------------------------------------------
int checkDeviceType(const char *dev);

//-----------------------------------------------------------------------------
// GLOBAL DATA
//-----------------------------------------------------------------------------

#endif

//-----------------------------------------------
#endif /* GLOBAL_H_ */
