/**----------------------------------------------------------------------------
 * PROJECT: rasp_varcosv
 * PURPOSE:
 * 
 *-----------------------------------------------------------------------------  
 * CREATION: 18 May 2016
 * Author: Luca Mini
 * 
 * LICENCE: please see LICENCE.TXT file
 * 
 * HISTORY (of the module):
 *-----------------------------------------------------------------------------
 * Author              | Date        | Description
 *-----------------------------------------------------------------------------
 *-----------------------------------------------------------------------------
 */

#ifndef HARDWAREGPIO_H_
#define HARDWAREGPIO_H_

//=============================================================================
#ifdef RASPBERRY
#define HW_APP_CLASSNAME				hwgpio

#define HW_GPIO_INIT()					HW_APP_CLASSNAME->init();

#define HW_BLINK_FAST()					HW_APP_CLASSNAME->setBlink(200,200)
#define HW_BLINK_SLOW()					HW_APP_CLASSNAME->setBlink(500,500)

#define HW_BLINK_ALIVE()				HW_APP_CLASSNAME->setBlink(150,2000)
#define HW_BLINK_WAIT_NET()			HW_APP_CLASSNAME->setBlink(200,200)
#else
#define HW_APP_CLASSNAME

#define HW_GPIO_INIT()

#define HW_BLINK_FAST()
#define HW_BLINK_SLOW()

#define HW_BLINK_ALIVE()
#define HW_BLINK_WAIT_NET()
#endif


#ifdef RASPBERRY

//#include "pthread.h"
#include <iostream>
#include "wiringPi.h"
#include "global.h"

#define GPIO_SV_LED				7

class HardwareGPIO
{
public:
	HardwareGPIO()
	{
	pthread_mutex_init(&mutexHw,NULL);
	resetApplicationRequest();
	};
	virtual ~HardwareGPIO() {};


	/**
	 * initialise the HW GPIOs
	 */
	void init()
	{
	wiringPiSetup();
	pinMode(GPIO_SV_LED, OUTPUT);
	startThread(NULL);
	ledOff();
	}

	void closeHw()
	{
	endApplicationRequest();
	joinThread();
	ledOff();
	}

	/**
	 * led turn on
	 */
	inline void ledOn()
	{
	ledOn_ms=0;
	ledOff_ms=0;
	digitalWrite (GPIO_SV_LED, LOW);
	}

	/**
	 * led turn off
	 */
	inline void ledOff()
	{
	digitalWrite (GPIO_SV_LED, HIGH);
	}

	/**
	 * set blink times [ms]
	 * if one time is 0, turn on or off the led
	 * @param timeOn 	[ms]
	 * @param timeOff	[ms]
	 */
	void setBlink(int timeOn, int timeOff)
	{
	pthread_mutex_lock(&mutexHw);
	this->ledOn_ms=timeOn;
	this->ledOff_ms=timeOff;
	pthread_mutex_unlock(&mutexHw);
	}

private:
	int ledOn_ms;
	int ledOff_ms;

	//-----------------------------------------------------------------------------
	// thread

	/**
	 * start the execution of the thread
	 * @param arg (Uses default argument: arg = NULL)
	 */
	bool startThread(void *arg)
	{
	bool ret=true;
	bool *_started;
	void *_arg;
	pthread_t *_id;

	_started=&startedHw;
	_arg=this->argHw;
	_id=&_idHw;

	if (!*_started)
		{
		*_started = true;
		_arg = arg;
		/*
		 * Since pthread_create is a C library function, the 3rd
		 * argument is a global function that will be executed by
		 * the thread. In C++, we emulate the global function using
		 * the static member function that is called exec. The 4th
		 * argument is the actual argument passed to the function
		 * exec. Here we use this pointer, which is an instance of
		 * the Thread class.
		 */
		if ((ret = pthread_create(_id, NULL, &execHw, this)) != 0)
			{
			cout << strerror(ret) << endl;
			//throw "Error";
			ret=false;
			}
		}
	return ret;
	}

	/**
	 * Allow the thread to wait for the termination status
	 * @param which can be 'h' for h or 'r' for rx
	 */
	void joinThread()
	{
	if(startedHw)
		{
		pthread_join(_idHw, NULL);
		}
	}


	/**
	 * set the end application status to terminate all
	 */
	void endApplicationRequest()
	{
	//cout << "ending thread" << endl;
	pthread_mutex_lock(&mutexHw);
	this->endApplication=true;
	pthread_mutex_unlock(&mutexHw);
	}

	/**
	 * get the termination status
	 * @return true: end; false continue
	 */
	bool endApplicationStatus()
	{
	bool ret;
	pthread_mutex_lock(&mutexHw);
	ret=this->endApplication;
	pthread_mutex_unlock(&mutexHw);
	return ret;
	}

	/**
	 * set the end application status to permit the restart
	 */
	void resetApplicationRequest()
	{
	//cout << "thread reset" << endl;
	pthread_mutex_lock(&mutexHw);
	this->endApplication=false;
	pthread_mutex_unlock(&mutexHw);
	}

	//-----------------------------------------------------------------------------
	// thread
	pthread_t _idHw;
	pthread_attr_t _attrHw;
	pthread_mutex_t mutexHw;

	bool startedHw;
	bool noattrHw;
	void *argHw;

	bool endApplication;

	/**
	 * Function that is used to be executed by the thread
	 * @param thr
	 */
	static void *execHw(void *thr)
	{
	reinterpret_cast<HardwareGPIO *>(thr)->runHw();
	return NULL;
	}

  /**
   * thread di ricezione
   */
	void runHw()
	{
	int ton=0,toff=0;
	ledOff();

	cout << "starting hw thread" << endl;
	while (!endApplicationStatus())
		{
		cout << "running hw thread" << endl;

		if(pthread_mutex_trylock(&mutexHw)==0)
			{
			ton=ledOn_ms;
			toff=ledOff_ms;
			pthread_mutex_unlock(&mutexHw);
			}
		if(ton==0 && toff==0)
			{
			ledOff();
			}
		else if(ton==0)
			{
			ledOff();
			}
		else if(toff==0)
			{
			ledOn();
			}
		else
			{
			/rintf("ton=%d; toff=%d\n",ton,toff);
			ledOn();
			//printf("%d\n",usleep(ton*1000));
			delay(ton);
			ledOff();
			//printf("%d\n",usleep(toff*1000));
			//cout << "**** I'm here ****" << endl;
			delay(toff);
			}
		}
	cout << "end hw thread" << endl;
	}

};

#endif
//=============================================================================
//#include <wiringPi.h>
//int main (void)
//{
//  wiringPiSetup () ;
//  pinMode (7, OUTPUT) ;
//  for (;;)
//  {
//    digitalWrite (7, HIGH) ; delay (500) ;
//    digitalWrite (7,  LOW) ; delay (500) ;
//  }
//  return 0 ;
//}

//-----------------------------------------------
#endif /* HARDWAREGPIO_H_ */
