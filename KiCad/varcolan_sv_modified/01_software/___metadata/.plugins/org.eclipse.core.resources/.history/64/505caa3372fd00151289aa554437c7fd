/*
 *-----------------------------------------------------------------------------
 * PROJECT: varcosv
 * PURPOSE: see module Slave.h file
 *-----------------------------------------------------------------------------
 */

#include "Slave.h"
#include "dataStructs.h"
#include "comm/app_commands.h"
#include "comm/CommTh.h"
#include "common/utils/Trace.h"
#include "common/utils/Utils.h"
#include "db/DBWrapper.h"

extern struct globals_st gd;
extern CommTh *comm;
extern Trace *dbg;
extern DBWrapper *db;

/**
 * ctor
 */
Slave::Slave()
{
//fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / gd.loopLatency;
fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / 500000;
scriptCounter=(SCRIPT_CHECK_TIME*1000000) / 500000;
}

/**
 * dtor
 */
Slave::~Slave()
{
}

/**
 * main loop to run in main
 * this should run into a loop
 */
void Slave::mainLoop()
{
uint32_t val;

if(gd.frameQueue.size()>MAX_MSG_QUEUE_DEPTH_WARNING)
	{
	dbg->trace(DBG_WARNING,"queue message has reach " + to_string(gd.frameQueue.size()) + " messages");
	}
if(!gd.frameQueue.empty())
	{
	f=gd.frameQueue.front();
	gd.frameQueue.pop();
	switch(f.frame.cmd)
		{
		case HPROT_CMD_SV_CHECK_CRC_P_W:
			handleInternalEvents();
			break;
		case HPROT_CMD_SV_WEEKTIME_CRC_LIST:
			weektimeCheck();
			break;
		case HPROT_CMD_SV_PROFILE_CRC_LIST:
			profileCheck();
			dbg->trace(DBG_NOTIFY,"Profile CRC list from %d",(int)f.frameData[0]);
			break;
		case HPROT_CMD_SV_NEW_EVENT:
			handleNetworkEvent();
			break;
		case HPROT_CMD_SV_REQUEST_CURRENT_AREA:
			handleRequestArea();
			break;
		//.................................................
		case HPROT_CMD_SV_FW_VERSION:
			// check if the version is above the currently installed one in the master
			// this answer arrives only under request
			if(firmwareValidate(f.frameData[0]))
				{
				if(firmwareCheckVersion(f.frameData[1],f.frameData[2]))
					{
					comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
					}
				else
					{
					comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
					}
				}
			else
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
				}
			break;

		case HPROT_CMD_SV_METADATA_FW:
			comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_METADATA_FW,(uint8_t *)&fwMetadata,sizeof(FWMetadata_t));
			break;

		case HPROT_CMD_SV_FW_CHUNK_REQ:
			val=*(uint32_t*)&f.frameData[0];
			firmwareChunkSend(val,f.frameData[4]);
			break;
		}
	}

// check for new firmware (not always)
if(fwCheckCounter>0) fwCheckCounter--;
if(fwCheckCounter==0)
	{
	globals_st::dataEvent_t de=firmwareCheckForNew();
	if(de.dataEvent==sv_fw_new_version)
		{
		gd.dataEventQueue.push(de);
		}
	// recharges the counter
	fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / gd.loopLatency;
	}

// check for script to be executed
if(scriptCounter>0) scriptCounter--;
if(scriptCounter==0)
	{
	runScriptFile(SCRIPT_FILENAME,SCRIPT_STATUS_FNAME);
	// recharges the counter
	scriptCounter=(SCRIPT_CHECK_TIME*1000000) / gd.loopLatency;
	}

}

/**
 * executes a script (not bash script but a proprietary one)
 * @param fname
 * @return true: ok
 */
bool Slave::runScriptFile(string script_fname,string status_fname)
{
bool ret=true;
ifstream f;
fstream s;
string line;
int nline=0;
bool run=false;
vector<string> toks;

// check if it must execute the script
s.open(status_fname.c_str(),ios::in);
if(s.is_open())
	{
	// read the file
	while (!s.eof())
		{
		nline++;
		getline(s, line);
		trim(line);
		if(line.empty()) continue;
		if(line[0]=='#') continue;
		if(line=="1")
			{
			run=true;
			s.close();
			// reopen in writing mode
			s.open(status_fname.c_str(),ios::out);
			if(s.is_open())
				{
				s << "0" << endl;
				}
			}
		break;
		}
	}
s.close();

nline=0;
// execute the script
try
	{
	if(run)
		{
		dbg->trace(DBG_NOTIFY,"script execution begin");
		f.open(script_fname.c_str());
		if(f.is_open())
			{
			// read the file
			while (!f.eof())
				{
				getline(f, line);
				trim(line);
				if(line.empty()) continue;
				if(line[0]=='#') continue;
				toks.clear();
				Split(line,toks," \t");

				// parse commands
				//......................................................
				if(toks[0]=="fw")
					{
					if(toks[1]=="force")
						{
						dbg->trace(DBG_NOTIFY,"SCRIPT: force update firmware for " + toks[3]);
						if(toks[3]=="varcolan")
							{
							// check if file exists
							string fn=_S FIRMWARE_UPD_PATH + _S FIRMWARE_VARCOLAN;
							if(fileExists(fn+FIRMWARE_BIN_EXT) && fileExists(fn+FIRMWARE_TXT_EXT))
								{
								globals_st::dataEvent_t de;
								de.dataEvent=sv_fw_new_version;
								de.tag.fw_device_type=DEVICE_TYPE_VARCOLAN;
								gd.dataEventQueue.push(de);
								}
							else
								{
								throw 3;
								}
							}
						else
							{
							throw 1;
							}
						}
					else
						{
						throw 100;	// generic syntax error
						}
					}
				//......................................................
				else if(toks[0]=="exe")
					{
					if(toks.size()<2) throw 2;
					string cmd=toks[1];
					dbg->trace(DBG_NOTIFY,"SCRIPT: execute shell script " + toks[1]);
					for(int i=1;i<toks.size();i++) // concatenate parameters
						{
						cmd+=" " + toks[i];
						}
					system(cmd.c_str());
					}
				//......................................................
				//......................................................
				else
					{
					throw 100;	// generic syntax error
					}
				}
			}
		f.close();
		dbg->trace(DBG_NOTIFY,"script execution end");
		}
	}
catch(int error_no)
	{
	switch(error_no)
		{
		case 1:
			dbg->trace(DBG_ERROR,"SCRIPT: unknown device to update @line %d",nline);
			break;
		case 2:
			dbg->trace(DBG_ERROR,"SCRIPT: SYNTAX: exe without script name  @line %d",nline);
			break;
		case 3:
			dbg->trace(DBG_ERROR,"SCRIPT: firmware not found");
			break;

		case 100:
			dbg->trace(DBG_ERROR,"SCRIPT: SYNTAX error @line %d",nline);
			break;
		}
	ret=false;
	}
return ret;
}
//-----------------------------------------------------------------------------
// PRIVATE
//-----------------------------------------------------------------------------
/**
 * check for the profile CRC list, if is ok, send ACK else send the  profile
 * which crc differ
 */
void Slave::profileCheck()
{
bool equal=true;
for(int i=0;i<f.frameData[1];i++)
	{
	if(gd.profiles[i+f.frameData[0]].params.crc8 != f.frameData[2+i])
		{
		equal=false;
		// crc are not equals, send the profile to align
		dbg->trace(DBG_NOTIFY,"profile %d differs",i+f.frameData[0]);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_PROFILE_CRC_LIST,(uint8_t*)&gd.profiles[i+f.frameData[0]].params,sizeof(Profile_parameters_t));
		break;
		}
	}
if(equal)
	{
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * check for the profile CRC list, if is ok, send ACK else send the  profile
 *
 */
void Slave::weektimeCheck()
{
bool equal=true;
for(int i=0;i<MAX_WEEKTIMES;i++)
	{
	if(gd.weektimes[i].params.crc8 != f.frameData[i])
		{
		equal=false;
		// crc are not equals, send the weektime to align
		dbg->trace(DBG_NOTIFY,"weektime %d differs",i);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_WEEKTIME_CRC_LIST,(uint8_t*)&gd.weektimes[i].params,sizeof(Weektime_parameters_t));
		break;
		}
	}
if(equal)
	{
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * handle all internal protocol or other events and check if sv has something to tell or to sync data
 */
void Slave::handleInternalEvents()
{
uint8_t globCrcW,globCrcP;

globCrcP=f.frameData[0];
globCrcW=f.frameData[1];

/*
 * NOTE: this sequence defines intrinsically the priority
 */
if(globCrcP!=gd.globProfilesCRC) // unsynced
	{
	dbg->trace(DBG_NOTIFY,"Profiles differs");
	txData[0]=(uint8_t)sv_profile_data_error;
	comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
	}
else if(globCrcW!=gd.globWeektimesCRC) // unsynced
	{
	dbg->trace(DBG_NOTIFY,"Weektimes differs");
	txData[0]=(uint8_t)sv_weektime_data_error;
	comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
	}
else if(!gd.dataEventQueue.empty())
	{
	globals_st::dataEvent_t dataev;
	Badge_parameters_t badge;

	dataev=gd.dataEventQueue.front();
	gd.dataEventQueue.pop();
	switch(dataev.dataEvent)
		{
		case sv_badge_data:
			db->getBadge(dataev.tag.badge_id,badge);
			txData[0]=(uint8_t)sv_badge_data;
			memcpy(&txData[1],&badge,sizeof(Badge_parameters_t));
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,sizeof(Badge_parameters_t)+1);
			break;
		case sv_terminal_data:
			// todo retrieve terminal data from database and send it to the requester
			break;
		case sv_new_time:
			// todo get the current time and send it to the requester
			break;
		case sv_fw_version_req:
			txData[0]=(uint8_t)sv_fw_version_req;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;
		case sv_fw_new_version:
			txData[0]=(uint8_t)sv_fw_version_req;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;

		default:
			// all other cases are handled before
			break;
		}
	}
else
	{
	// all OK
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * handle network event
 */
void Slave::handleNetworkEvent()
{
Event_t ev;

dbg->trace(DBG_NOTIFY,"New event from master id:%d",f.frame.srcID);
memcpy(&ev,f.frameData,sizeof(Event_t));
switch(ev.Parameters_s.eventCode)
	{
	case transit:
		// TODO update badge current area
		//break; // not used becaus the event must be stored
	default:
		db->addEvent(ev);
		break;
	}
comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
}

/**
 * handle the bdge area request
 */
void Slave::handleRequestArea()
{
Badge_parameters_t badge;
uint16_t bid=*(uint16_t*)f.frameData;

if(db->getBadge(bid,badge))
	{
	txData[0]=(uint8_t)badge.Parameters_s.s.currentArea;
	dbg->trace(DBG_NOTIFY,"Badge id %d found, current area: %d",bid,(int)badge.Parameters_s.s.currentArea);
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_REQUEST_CURRENT_AREA,	txData,1);
	}
else
	{
	dbg->trace(DBG_WARNING,"Badge id %d not found",bid);
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
	}
}

//-----------------------------------------------------------------------------
// FIRMWARE HANDLING MEMBERS
//-----------------------------------------------------------------------------
/**
 * check if there is a new firmware
 * @return type of new firmware (for which device)
 */
globals_st::dataEvent_t Slave::firmwareCheckForNew()
{
globals_st::dataEvent_t ev;
uint8_t type=DEVICE_TYPE_NONE;
vector<string> files;
// the command is to count files present:
// find ./*.tar  -printf "%f\n" | wc -l
// the file only is:
// find ./*.tar  -printf "%f\n"

//string cmd="find ./*.tar  -printf \"%f\n\"";
//FILE *lsFile_p = popen(cmd.c_str(), "r");
//
//if (!lsFile_p)
//{
//  return false;
//}
//char buffer[1024];
//char *line_p = fgets(buffer, sizeof(buffer), lsFile_p);
//pclose(lsofFile_p);

fileList(FIRMWARE_NEW_PATH,files,_S FIRMWARE_PKG_EXT,true);

// NOTE: scan all files but takes only the first one
ev.dataEvent=sv_none;
FOR_EACH(it,string,files)
	{
	if(startsWith(*it,FIRMWARE_VARCOLAN))
		{
		// get the version file numbers
		vector<string> toks;
		Split(*it,toks,"_.");
		try
			{
			if(toks.size()!=3) throw 1;
			ev.dataEvent=sv_fw_new_version;
			ev.tag.fw_device_type=DEVICE_TYPE_VARCOLAN;

			if(toks[1].length()!=4) throw 1;
			//strcpy(ev.tag.fw_version_file,toks[1].c_str());
			type=DEVICE_TYPE_VARCOLAN;

			string cmd="mv " + _S FIRMWARE_NEW_PATH + *it + " " FIRMWARE_UPD_PATH + _S FIRMWARE_VARCOLAN + FIRMWARE_PKG_EXT;
			system(cmd.c_str());
			system("sync");
			dbg->trace(DBG_NOTIFY,"found new varcolan firmware: " + *it);
			if(!firmwareValidate(DEVICE_TYPE_VARCOLAN))
				{
				// remove all firmwares
				string cmd= "rm "+ _S FIRMWARE_UPD_PATH + FIRMWARE_VARCOLAN + "*";
				remove(cmd.c_str());
				throw 2;
				}
			break;
			}
		catch(int error_no)
			{
			ev.dataEvent=sv_none;
			switch(error_no)
				{
				case 1:
					dbg->trace(DBG_ERROR,"wrong filename format [<typename>_<versionMMmm>.tar]: " + *it);
					break;
				case 2:
					dbg->trace(DBG_WARNING,"firmware removed");
					break;
				default:
					dbg->trace(DBG_WARNING,"update cannot be performed");
					break;
				}
			}
		}
	}
return ev;
}

/**
 * unpack the package and check if the firmware has a valid md5
 * @return true:ok
 */
#define RESULT_TXT_FILE		"__tmpres.txt"
bool Slave::firmwareValidate(uint8_t type)
{
bool ret=false;
string cmd;

switch(type)
	{
	case DEVICE_TYPE_VARCOLAN:
		// open the txt file
		actualFWname = _S FIRMWARE_VARCOLAN;
		actualFWtxt= _S FIRMWARE_UPD_PATH + _S FIRMWARE_VARCOLAN + _S FIRMWARE_TXT_EXT;
		actualFWbin = _S FIRMWARE_VARCOLAN + _S FIRMWARE_BIN_EXT;
		break;
	case DEVICE_TYPE_SUPERVISOR:
		break;
	case DEVICE_TYPE_SUPPLY_MONITOR:
		// todo
		break;
	case DEVICE_TYPE_DISPLAY:
		// todo
		break;
	}

dbg->trace(DBG_NOTIFY,"unpacking firmware package");
cmd=_S FIRMWARE_UPD_PATH + FIRMWARE_UNPACKER + " " + actualFWname + " " + RESULT_TXT_FILE + " rmpack";
system(cmd.c_str());
ifstream f;
string line;
string resfile=_S FIRMWARE_UPD_PATH + _S RESULT_TXT_FILE;
f.open(resfile.c_str());
if(f.is_open())
	{
	getline(f, line);
	size_t found=line.find(actualFWbin);
	if(found!=string::npos)
		{
		found=line.find("OK");
		if(found!=string::npos)
			{
			dbg->trace(DBG_NOTIFY,"firmware: " + line);
			ret=true;
			}
		else
			{
			dbg->trace(DBG_ERROR,"invalid MD5 firmware");
			}
		}
	else
		{
		dbg->trace(DBG_ERROR,"wrong firmware: " + line);
		}
	f.close();
	}
remove(resfile.c_str());

return ret;
}

/**
 * check the firmware version, if it is < of the one sotred in the supervisor -> true
 * @param type
 * @param major
 * @param minor
 * @return true if the device need to be updated
 */
bool Slave::firmwareCheckVersion(uint8_t major, uint8_t minor)
{
ifstream f;
string line;
vector<string> toks;
int fwver_sv,fwver_dev;
bool ret=false;

f.open(actualFWtxt.c_str());
if(f.is_open())
	{
	// read the file
	getline(f, line);	// md5
	getline(f, line);	// version
	Split(line,toks,"#.");
	fwMetadata.version.major=atoi(toks[0].c_str());
	fwMetadata.version.minor=atoi(toks[1].c_str());
	fwver_sv=fwMetadata.version.major*100+fwMetadata.version.minor;
	fwver_dev=major*100+minor;
	if(fwver_sv>fwver_dev)
		{
		// get the file size
		FILE *fp;
		fp=fopen((_S FIRMWARE_UPD_PATH + actualFWbin).c_str(),"rb");
		if(fp)
			{
			fwMetadata.fw_size=filelength(fp);
			// calculates its crc32
			uint8_t b;
			fwMetadata.fw_crc32=CRC32_INIT;
			int cnt=0;
			while(!feof(fp))
				{
//			for(uint32_t i=0;i<actualFWFileSize;i++)
//				{
				cnt=fread(&b,1,1,fp);
				if(cnt)	crc32(b,&fwMetadata.fw_crc32);
				}
			//cout << cnt << endl;
			dbg->trace(DBG_NOTIFY,"firmware %s size %lu bytes (crc32: %04X)",actualFWbin.c_str(),fwMetadata.fw_size,fwMetadata.fw_crc32);
			fclose(fp);
			ret=true;
			}
		else
			{
			dbg->trace(DBG_ERROR,"unable to open firmware file " + actualFWbin);
			ret=false;
			}
		}
	f.close();
	}
return ret;
}

/**
 * send a firmware chunk to the requester
 * @param startByte
 * @param amount
 * @return true: ok
 */
bool Slave::firmwareChunkSend(uint32_t startByte,uint8_t amount)
{
bool ret=false;
FILE *fp;

fp=fopen((_S FIRMWARE_UPD_PATH + actualFWbin).c_str(),"rb");
if(fp)
	{
	fseek(fp, startByte, SEEK_SET);
	memset(txData,0xff,amount);
	size_t n=fread(txData,1,amount,fp);
	if(n)
		{
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_FW_CHUNK_REQ,	txData,amount);
		int rem=(fwMetadata.fw_size > (startByte+amount)) ? (fwMetadata.fw_size-(startByte+amount)) : (0);
		dbg->trace(DBG_NOTIFY,"FW update: sent %d bytes from 0x%04X, remaining %lu bytes",amount,startByte,rem);
		fclose(fp);
		}
	else
		{
		dbg->trace(DBG_NOTIFY,"No more data to read from " + actualFWbin);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
		}
	ret=true;
	}
else
	{
	dbg->trace(DBG_ERROR,"unable to open firmware file " + actualFWbin);
	}
return ret;
}
