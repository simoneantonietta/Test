/**----------------------------------------------------------------------------
 * PROJECT:
 * PURPOSE:
 * widget to plot like an oscilloscope
 *-----------------------------------------------------------------------------  
 * CREATION: 21 Jun 2016
 * Author: Luca Mini
 * 
 * LICENCE: please see LICENCE.TXT file
 * 
 * HISTORY (of the module):
 *-----------------------------------------------------------------------------
 * Author              | Date        | Description
 *-----------------------------------------------------------------------------
 *-----------------------------------------------------------------------------
 */

#ifndef SCOPEVIEW_H_
#define SCOPEVIEW_H_

#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/Fl_Input.H>

#include <math.h>


class ScopeView : public Fl_Box
{
public:
  int view_pos;
  int view_break;
  int view_width;

  int view_size;
  float *view;	// trace view

  /**
   * ctor
   * @param x
   * @param y
   * @param w
   * @param h
   * @param l
   */
  ScopeView(int x, int y,int w,int h, const char *l=0) : Fl_Box(x,y,w,h,l)
  {
  view_pos=0;
  view_break=0;
  view_width=500;
  view=NULL;
  xmin=0.0;
  xmax=100.0;
  ymin=-1.0;
  ymax=1.0;
  m=1.0;
  q=0.0;
  yzero=ymax/(ymax-ymin);
  tick=0.01;			// [s]

	if(view != NULL)
		{
		delete [] view;
		}
	view=new float[w];
	view_size=w;

	cleanBuffer();
	};

  /**
   * dtor
   */
	virtual ~ScopeView() {};



	/**
	 * set the y range and prepare for scaling data input
	 * @param ymin
	 * @param ymax
	 */
	void setYrange(float ymin,float ymax)
	{
	this->ymax=ymax;
	this->ymin=ymin;
	// calculates m,q for scaling
	m=1.0/ymax;
	q=1.0-m*ymax;
	}

	/**
	 * value to plot
	 * @param p
	 */
	void setPoint(float p)
	{
	float _p=p;
	if(_p>ymax)
		{
		_p=ymax;
		}
	if(_p<ymin)
		{
		_p=ymin;
		}
	// scaling
	_p=m*_p+q;
	view[view_pos]=(float)_p;
	}

	/**
	 * start plotting
	 */
	void start()
	{
	Fl::add_timeout(0.1, s_onTimerPrintQueue_CB, (void *)this);
	}

	/**
	 * set the grid number division (0 disables grid)
	 * @param xgrid
	 * @param ygrid
	 */
	void setGrid(int xgrid,int ygrid)
	{
	this->xdiv=xgrid;
	this->ydiv=ygrid;
	this->xgrid_spc=0;
	this->ygrid_spc=0;
	if(xgrid>0)
		{
		this->xgrid_spc=w()/xgrid;
		}
	if(ygrid>0)
		{
		this->ygrid_spc=h()/ygrid;
		}
	}

	/**
	 * get the tick (sample period)
	 * @return [s]
	 */
	float getTick() const
	{
	return tick;
	}

	/**
	 * return the division value in [s]
	 * @return division value for X axis (time) [s]
	 */
	float getDivValueX()
	{
	float v=xgrid_spc*tick;
	return v;
	}

	/**
	 * return the division value for the Y axis
	 * @return division value
	 */
	float getDivValueY()
	{
	float v=(ymax-ymin);
	return v;
	}

	/**
	 * set the tick (sample period)
	 * @param tick [s]
	 */
	void setTick(float tick)
	{
	this->tick = tick;

	this->xmin=0.0;
	this->xmax=this->tick*view_size;
	}
//=============================================================================
private:
  float ymin,ymax,xmin,xmax,yzero;
  float tick;
  float m,q;
  int xgrid_spc,ygrid_spc,xdiv,ydiv;

	void cleanBuffer()
	{
	for(int i=0;i<view_size;i++)
		{
		view[i]=0.0;
		}
	}

	/**
	 * overrides
	 */
	void draw()
	{
	char tmp[20];

	int wd = w();
	int ht = h();
	int xo = x();
	int yo = y();

	// clear
	fl_color(FL_BLACK);
	fl_rectf(xo, yo, wd, ht);

	// grid
	fl_color(FL_DARK1);
	if(ygrid_spc>0)
		{
		for(int gy=yo;gy<(yo+ht);gy+=ygrid_spc)	// x
			{
			fl_xyline(xo,gy,xo+wd);
			}
		}

	if(xgrid_spc>0)
		{
		for(int gx=xo;gx<(xo+wd);gx+=xgrid_spc)	// y
			{
			fl_yxline(gx,yo,yo+ht);
			}
		}
	// zero line (if exists)
	if(yzero>=0.0)
		{
		fl_color(FL_WHITE);
		fl_xyline(xo,yo+(int)(yzero*(float)ht),xo+wd);
		}

	// labels
	fl_color(FL_BLACK);

	sprintf(tmp,"%0.2f",ymax);
	fl_draw(tmp,	xo-50,yo+10);			// y high
	if(yzero>=0.0)
		{
		fl_draw("0",	xo-50,yo+(yzero*(float) ht));	// y zero
		}
	sprintf(tmp,"%0.2f",ymin);
	fl_draw(tmp,	xo-50,yo+ht-10); 	// y low
	sprintf(tmp,"%0.2f",xmin);
	fl_draw(tmp,	xo-30,yo+ht+30);			// x left
	sprintf(tmp,"%0.2f",xmax);
	fl_draw(tmp,	xo+wd-30,yo+ht+30); 	// y right

	// plot
	fl_color(FL_GREEN);

	// everything is normalised and scaled to 1.0 as maximum value (x and y)
	fl_push_matrix();
	fl_translate(xo, (yo + (ht / 2)));
	fl_scale(wd, ht / 2);

	fl_begin_line();
	for(int i = 0;i < view_size;i++)
		{
		if(i == view_break)
			{
			fl_end_line();
			fl_begin_line();
			}
		fl_vertex(((float) i / (float) view_size), -view[i]);
		//view[i]=0;
		}
	fl_end_line();
	fl_pop_matrix();
	} /* end of draw() method */

	//-----------------------------------------------------------------------------
	// CALLBACKS
	//-----------------------------------------------------------------------------
	/**
	 * callback
	 * @param obj ScopeView object ptr
	 */
	static void s_onTimerPrintQueue_CB(void* data) {((ScopeView*)data)->update_scope(data);}

	void update_scope(void *data)
	{
	view_pos++;
	if(view_pos >= view_size) view_pos = 0;
	view_break = view_pos+1;
	Fl::repeat_timeout(tick, s_onTimerPrintQueue_CB, data);
	redraw();
	// force redraw immediately
	//Fl::check();

	//----------------
	// for debug
	static int __p=0;
	__p++;
	__p %= 101;
	setPoint((float)__p/100.0);
	//----------------
	}
};



#if 0
static ScopeView *scope = 0;


int main(int argc, char **argv)
	{
	Fl_Double_Window *main_win = new Fl_Double_Window(522, 210,
			"Scope Window");
	main_win->begin();
	scope = new scope_view(5, 5, 512, 200);
	main_win->end();

	// now create the trace - a sine wave
	for (int i = 0; i < trace_max; i++)
		{
		trace[i] = -sin((double)(i*5*2*M_PI/(double)trace_max));
		}
	for (int i = 0; i < view_width; i++)
		{
		view[i] = trace[i];
		}
	trace_pos = view_width;
	main_win->show(argc, argv);

	Fl::add_timeout(0.1, update_scope);

	return Fl::run();
	}
#endif

//-----------------------------------------------
#endif /* SCOPEVIEW_H_ */
