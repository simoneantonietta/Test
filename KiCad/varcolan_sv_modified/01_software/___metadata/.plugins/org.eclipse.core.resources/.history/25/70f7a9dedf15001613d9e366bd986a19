/*
 *-----------------------------------------------------------------------------
edwe * PROJECT: varcosv
 * PURPOSE: see module Slave.h file
 *-----------------------------------------------------------------------------
 */

#include "Slave.h"
#include "dataStructs.h"
#include "comm/app_commands.h"
#include "comm/CommTh.h"
#include "common/utils/Trace.h"
#include "db/DBWrapper.h"
#include "common/utils/SimpleCfgFile.h"

#define RESULT_TXT_FILE		"__tmpres.txt"

extern struct globals_st gd;
extern CommTh *comm;
extern Trace *dbg;
extern DBWrapper *db;
extern SimpleCfgFile *cfg;

/**
 * ctor
 */
Slave::Slave()
{
webCommandInProgress=false;
resetGlobalStatus();

//fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / gd.loopLatency;
fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / 500000;
scriptCounter=(SCRIPT_CHECK_TIME*1000000) / 500000;
oneSecondCounter=(1*1000000) / 500000;
actualType=DEVICE_TYPE_NONE;
dbSaveCounter=12000;
gd.simWeb_trigger=false;
gd.simWeb_command="";
//for(int i=0;i<MAX_DEVICE_ID;i++)
//	{
//	dataDevice[i]
//	}
}

/**
 * dtor
 */
Slave::~Slave()
{
for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
	{
	delete it->second.dataEventQueue;
	}
}

/**
 * push an event
 * @param ev event
 * @param dest 0=to all; else specify the destination ID
 */
void Slave::pushEvent(globals_st::dataEvent_t ev, int dest)
{
if(dest==0)	// to all master
	{
	for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
		{
		// iterator->first = key
		// iterator->second = value
		//it->second.dataEventQueue.push(ev);
		it->second.dataEventQueue->push_back(ev);
		}
	}
else // to a specific master
	{
	if(gd.deviceList.find(dest)!=gd.deviceList.end())
		{
		//gd.deviceList[dest].dataEventQueue.push(ev);
		gd.deviceList[dest].dataEventQueue->push_back(ev);
		}
	}
}

/**
 * main loop to run in main
 * this should run into a loop
 */
void Slave::mainLoop()
{
//=============================================================================
// STATE MACHINE  (one for each connected master)
// (status is typically altered from WEB or forced from other interfaces
if(!gd.frameQueue.empty())
	{
	f=gd.frameQueue.front();	// preview to get ID
	//gd.frameQueue.pop();
	masterListCheck();	// update master list if not present

	switch(gd.deviceList[f.frame.srcID].mainState)
		{
		case globals_st::sl_idle:
			worker_normal();
			break;
		case globals_st::sl_terminal_request:
			worker_terminalReq(f.frame.srcID);
			break;
		case globals_st::sl_master_dump:
			break;
		case globals_st::sl_sv_fw_upd:
			break;
		case globals_st::sl_varco_fw_upd:
			break;
		case globals_st::sl_supply_mon_fw_upd:
			break;
		case globals_st::sl_display_fw_upd:
			break;
		}
	}

//=============================================================================
// HANDLE WEB COMMANDS
if(webCommandInProgress)
	{
	if(checkGlobalStatus())
		{
		dbg->trace(DBG_NOTIFY,"web command DONE");
		db->setResult("DONE");
		webCommandInProgress=false;
		gd.simWeb_command="";
		gd.simWeb_trigger=false;
		resetDeviceStatus();
		resetGlobalStatus();
		}
	}

//=============================================================================
// TIMED OPERATIONS

//...................................
// check for new firmware (not always)
if(fwCheckCounter>0) fwCheckCounter--;
if(fwCheckCounter==0)
	{
	globals_st::dataEvent_t de=firmwareCheckForNew();
	if(de.dataEvent==globals_st::dataEvent_t::ev_fw_new_version)
		{
		pushEvent(de,f.frame.srcID);
		}
	// recharges the counter
	fwCheckCounter=(FIRMWARE_CHECK_TIME*1000000) / gd.loopLatency;
	}

//...................................
// check for script to be executed
if(scriptCounter>0) scriptCounter--;
if(scriptCounter==0)
	{
	runScriptFile(SCRIPT_FILENAME,SCRIPT_STATUS_FNAME);
	// recharges the counter
	scriptCounter=(SCRIPT_CHECK_TIME*1000000) / gd.loopLatency;
	}

//...................................
// save database to SD card [s]
if(dbSaveCounter==0)
	{
	db->dbSave();
	dbSaveCounter=gd.dbSaveTime;
	}

//...................................
// generic 1 second counter
if(oneSecondCounter>0) oneSecondCounter--;
if(oneSecondCounter==0)
	{
	if(dbSaveCounter>0) dbSaveCounter--;

	// exe web commands if any
	if(gd.enableWebCommands)
		{
		if(!webCommandInProgress)
			{
			exeWebCommands();
			}
		}

//	txData[0]=0x01;
//	comm->sendCommand(f.frame.srcID,0x50,txData,1);
	oneSecondCounter=(1*1000000) / gd.loopLatency;
	}
}


//-----------------------------------------------------------------------------
// PRIVATE
//-----------------------------------------------------------------------------
/**
 * reset global status
 */
void Slave::resetGlobalStatus()
{
gd.glob_mainState=gd.expected_glob_mainState=globals_st::sl_unk;
gd.glob_workerState=gd.expected_glob_workerState=globals_st::wkr_unk;
}

/**
 * reset devices statuses to idle
 * @param if id <0 the all devices are reset(default); else specifies the ID to be reset
 */
void Slave::resetDeviceStatus(int id)
{
if(id<0)
	{
	for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
		{
		it->second.mainState=globals_st::sl_idle;
		it->second.workerState=globals_st::wkr_idle;
		}
	}
else
	{
	gd.deviceList[id].mainState=globals_st::sl_idle;
	gd.deviceList[id].workerState=globals_st::wkr_idle;
	}
}

/**
 * set all devices to a particular state, if specified, else is idle
 * @param mainstate
 * @param workerstate
 */
void Slave::setAllDeviceStatus(enum globals_st::slaveStates_e mainstate,enum globals_st::workerStates_e workerstate)
{
for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
	{
	it->second.mainState=mainstate;
	it->second.workerState=workerstate;
	}
}

//.................................
// WORKERS (one for each master)
//.................................

/**
 * run in idle state
 */
void Slave::worker_normal()
{
uint32_t val;
fwit_t it;
Badge_parameters_t bpar;
Terminal_parameters_to_send_t tpar;
uint8_t badgeUID[BADGE_SIZE*2+1];

if(!gd.frameQueue.empty())
	{
	f=gd.frameQueue.front();
	gd.frameQueue.pop();
	switch(f.frame.cmd)
		{
		//.................................................
		case HPROT_CMD_SV_CHECK_CRC_P_W:	// polling
			//masterListCheck();
			handleInternalEvents();
			break;
		//.................................................
		case HPROT_CMD_SV_WEEKTIME_CRC_LIST:
			weektimeCheck();
			break;
		//.................................................
		case HPROT_CMD_SV_PROFILE_CRC_LIST:
			profileCheck();
			dbg->trace(DBG_NOTIFY,"Profile CRC list from %d",(int)f.frameData[0]);
			break;
		//.................................................
		case HPROT_CMD_SV_NEW_EVENT:
			handleVarcoEvent();
			break;
		//.................................................
		case HPROT_CMD_SV_REQUEST_CURRENT_AREA:
			handleRequestArea();
			break;
		//.................................................
		case HPROT_CMD_SV_FW_VERSION:
			// check if the version is above the currently installed one in the master
			// this answer arrives only under request
			if(firmwareCheckVersion(f.frameData[0],f.frameData[1],f.frameData[2]))
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
				}
			else
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
				}
			break;
		//.................................................
		case HPROT_CMD_SV_METADATA_FW:
			it=find(firmwares.begin(),firmwares.end(),f.frameData[0]);
			if(it!=firmwares.end())
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_METADATA_FW,(uint8_t *)&it->fwMetadata,sizeof(FWMetadata_t));
				}
			else
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
				}
			break;
		//.................................................
		case HPROT_CMD_SV_FW_CHUNK_REQ:
			val=*(uint32_t*)&f.frameData[1];
			if(!firmwareChunkSend(f.frameData[0],val,f.frameData[5]))
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
				}
			break;
		//.................................................
		case HPROT_CMD_SV_BADGE_REQUEST:
			db->normalizeBadge(f.frameData,f.frame.len,badgeUID);
			if(db->getBadgeFromUID(badgeUID,bpar))
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_BADGE_REQUEST,(uint8_t *)&bpar,sizeof(Badge_parameters_t));
				}
			else
				{
				comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
				}
			break;
		//.................................................
		case HPROT_CMD_SV_MEMORY_DUMP:
			handleMasterDump();
			break;
		//.................................................
		case HPROT_CMD_SV_PRESENT_TERMINALS:
			memcpy(gd.deviceList[f.frame.srcID].terminalsData.terminalsPresent,f.frameData,MAX_TERMINALS);
			// convert in ascii string
			for(int j=0;j<MAX_TERMINALS;j++)
				{
				f.frameData[j] += 0x30;
				}
			f.frameData[MAX_TERMINALS]=0;
			dbg->trace(DBG_NOTIFY,"terminal list from master %d: %s",f.frame.srcID,f.frameData);
			break;
		//.................................................
		case HPROT_CMD_SV_TERMINAL_DATA:
			memcpy(&tpar,f.frameData,sizeof(Terminal_parameters_to_send_t));
			db->setTerminal(gd.terminals[gd.deviceList[f.frame.srcID].terminalsData.ndx].name,tpar);
			dbg->trace(DBG_NOTIFY,"terminal data from id=%d",f.frame.srcID);
			break;
		}
	}
}

/**
 * handle the terminal request data
 * @param master id
 */
void Slave::worker_terminalReq(int id)
{
Terminal_parameters_to_send_t tpar;
bool sendBusy=false;
bool found=false;
int dpos,cnt;

if(!gd.frameQueue.empty())
	{
	f=gd.frameQueue.front();
	gd.frameQueue.pop();

	gd.deviceList[id].timeout.startTimeout(WKR_TIMEOUT_TERMINALS*1000);

	switch(gd.deviceList[id].workerState)
		{
		case globals_st::wkr_idle:
			break;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		case globals_st::wkr_nterm_req:
			switch(f.frame.cmd)
				{
				//.................................................
				case HPROT_CMD_SV_CHECK_CRC_P_W:	// polling
					txData[0]=(uint8_t)sv_present_terminals_req;
					comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
					gd.deviceList[id].workerState=globals_st::wkr_nterm_wait;
					break;
				default:
					sendBusy=true;
					break;
				}
			break;

		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		case globals_st::wkr_nterm_wait:
			/*
			 * wait the answer
			 */
			switch(f.frame.cmd)
				{
				//.................................................
				case HPROT_CMD_SV_PRESENT_TERMINALS:
					memcpy(gd.deviceList[id].terminalsData.terminalsPresent,f.frameData,MAX_TERMINALS);
					gd.deviceList[id].terminalsData.ndx=0; // start scan from 0
					gd.deviceList[id].workerState=globals_st::wkr_term_param_req;
					break;
				default:
					sendBusy=true;
					break;
				}
			break;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		case globals_st::wkr_term_param_req:
			/*
			 * send the request for every terminal
			 */
			switch(f.frame.cmd)
				{
				//.................................................
				case HPROT_CMD_SV_CHECK_CRC_P_W:	// polling
					txData[0]=(uint8_t)sv_terminal_data_req;
					dpos=1;
					cnt=0;
					// creates the list
					for(;gd.deviceList[id].terminalsData.ndx<MAX_TERMINALS;gd.deviceList[id].terminalsData.ndx++)
						{
						if(gd.deviceList[id].terminalsData.terminalsPresent[gd.deviceList[id].terminalsData.ndx]==1)
							{
							txData[dpos]=gd.deviceList[id].terminalsData.ndx+1;	// start from 1
							dpos++;
							cnt++;
							found=true;
							if(cnt >= WKR_MAX_TERMINALDATA_PER_FRAME)
								{
								break;
								}
							}
						}
					if(found)
						{
						comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,dpos+1);
						gd.deviceList[id].workerState=globals_st::wkr_term_param_wait;
						}
					else
						{
						// no more requests
						gd.deviceList[id].workerState=globals_st::wkr_term_param_end;
						sendBusy=true;
						}
					break;
				default:
					sendBusy=true;
					break;
				}
			break;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		case globals_st::wkr_term_param_wait:
			/*
			 * wait terminal data previously requested
			 */
			switch(f.frame.cmd)
				{
				//.................................................
				case HPROT_CMD_SV_TERMINAL_DATA:
					// list of devices (if id==0 is invalid)
					for(int n=0;n<(f.frame.len/sizeof(Terminal_parameters_to_send_t));n++)
						{
						dpos=n*sizeof(Terminal_parameters_to_send_t);
						memcpy(&tpar,&f.frameData[dpos],sizeof(Terminal_parameters_to_send_t));

						if(tpar.terminal_id == 0)
							{
							dbg->trace(DBG_WARNING,"one terminal that was in the list, now is not available");
							}
						else
							{
							// write to database
							db->setTerminal(tpar.terminal_id,gd.terminals[gd.deviceList[id].terminalsData.ndx].name,tpar);
							}
						}

					if(gd.deviceList[id].terminalsData.ndx>=MAX_TERMINALS)
						{
						gd.deviceList[id].workerState=globals_st::wkr_term_param_end;
						}
					else
						{
						gd.deviceList[id].workerState=globals_st::wkr_term_param_req;
						}

					break;
				//.................................................
				case HPROT_CMD_NACK:
					db->removeTerminal(gd.deviceList[id].terminalsData.ndx);
					gd.deviceList[id].terminalsData.ndx++;
					break;
				default:
					sendBusy=true;
					break;
				}
			break;
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		case globals_st::wkr_term_param_end:
			sendBusy=true;
			break;
		}

	if(sendBusy)
		{
		txData[0]=(uint8_t)sv_busy;
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_CHECK_CRC_P_W,txData,1);
		}

	// check if the timeout expired
	if(gd.deviceList[id].timeout.checkTimeout())
		{
		resetDeviceStatus(id);
		webCommandInProgress=false;
		dbg->trace(DBG_WARNING,"worker operation timeout for ID %d", id);
		}
	}
}

/**
 * check the status of all  masters to update the global status variables
 * @param checkExpected true if need to compare the expected status (default)
 * @return true: if all master has equal status; false if someone differs
 */
bool Slave::checkGlobalStatus(bool checkExpected)
{
bool ret=false;

if(gd.deviceList.size()==1)
	{
	// in this case is obviously always true
	gd.glob_mainState=gd.deviceList.begin()->second.mainState;
	gd.glob_workerState=gd.deviceList.begin()->second.workerState;
	ret=true;
	}
else
	{
	gd.glob_mainState=gd.deviceList.begin()->second.mainState;
	gd.glob_workerState=gd.deviceList.begin()->second.workerState;
	ret=true;
	for(globals_st::iddevice_t it = gd.deviceList.begin();it != gd.deviceList.end();it++)
		{
		if(it->second.mainState!=gd.glob_mainState && it->second.workerState!=gd.glob_workerState)
			{
			gd.glob_mainState=globals_st::sl_unk;
			gd.glob_workerState=globals_st::wkr_unk;
			ret=false;
			break;
			}
		}
	}

if(ret && checkExpected)
	{
	if(gd.expected_glob_mainState != globals_st::sl_unk || gd.expected_glob_workerState != globals_st::wkr_unk)
		{
		ret = (gd.expected_glob_mainState == gd.glob_mainState && gd.expected_glob_workerState == gd.glob_workerState);
		}
	}
return ret;
}

//-----------------------------------------------------------------------------
/**
 * check for the profile CRC list, if is ok, send ACK else send the  profile
 * which crc differ
 */
void Slave::profileCheck()
{
bool equal=true;
for(int i=0;i<f.frameData[1];i++)
	{
	if(gd.profiles[i+f.frameData[0]].params.crc8 != f.frameData[2+i])
		{
		equal=false;
		// crc are not equals, send the profile to align
		dbg->trace(DBG_NOTIFY,"profile %d differs",i+f.frameData[0]);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_PROFILE_CRC_LIST,(uint8_t*)&gd.profiles[i+f.frameData[0]].params,sizeof(Profile_parameters_t));
		break;
		}
	}
if(equal)
	{
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * check for the profile CRC list, if is ok, send ACK else send the  profile
 *
 */
void Slave::weektimeCheck()
{
bool equal=true;
for(int i=0;i<MAX_WEEKTIMES;i++)
	{
	if(gd.weektimes[i].params.crc8 != f.frameData[i])
		{
		equal=false;
		// crc are not equals, send the weektime to align
		dbg->trace(DBG_NOTIFY,"weektime %d differs",i);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_WEEKTIME_CRC_LIST,(uint8_t*)&gd.weektimes[i].params,sizeof(Weektime_parameters_t));
		break;
		}
	}
if(equal)
	{
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * check the connection and if a polling is coming from a master, updates the list of the connected masters
 */
void Slave::masterListCheck()
{
globals_st::iddevice_t dit=gd.deviceList.find(f.frame.srcID);

if(dit == gd.deviceList.end()) // new master device
	{
	globals_st::dataDevice_t dd;
	dbg->trace(DBG_NOTIFY,"adding a new master");
	gd.deviceList[f.frame.srcID]=dd;
	gd.deviceList[f.frame.srcID].dataEventQueue=new circular_buffer<globals_st::dataEvent_t>(MAX_CIRC_BUFF_SIZE);
	}
}

/**
 * handle all internal protocol or other events and check if sv has something to tell or to sync data
 */
void Slave::handleInternalEvents()
{
uint8_t globCrcW,globCrcP;

globCrcP=f.frameData[0];
globCrcW=f.frameData[1];

/*
 * NOTE: this sequence defines intrinsically the priority
 */
if(globCrcP!=gd.globProfilesCRC && !gd.dumpFromMaster) // unsynced
	{
	dbg->trace(DBG_NOTIFY,"Profiles differs");
	txData[0]=(uint8_t)sv_profile_data_error;
	comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
	}
else if(globCrcW!=gd.globWeektimesCRC && !gd.dumpFromMaster) // unsynced
	{
	dbg->trace(DBG_NOTIFY,"Weektimes differs");
	txData[0]=(uint8_t)sv_weektime_data_error;
	comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
	}
else if(!gd.deviceList[f.frame.srcID].dataEventQueue->empty())
	{
	globals_st::dataEvent_t dataev;
	Badge_parameters_t badge;
	dataev=gd.deviceList[f.frame.srcID].dataEventQueue->front();
	//gd.deviceList[f.frame.srcID].dataEventQueue.pop();
	gd.deviceList[f.frame.srcID].dataEventQueue->pop_front();
	switch(dataev.dataEvent)
		{
		case globals_st::dataEvent_t::ev_badge_data:
			db->getBadgeFromId(dataev.tag.badge_id,badge);
			txData[0]=(uint8_t)sv_badge_data;
			memcpy(&txData[1],&badge,sizeof(Badge_parameters_t));
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,sizeof(Badge_parameters_t)+1);
			break;
		case globals_st::dataEvent_t::ev_terminal_data_upd:
			// todo retrieve terminal data from database and send it to the requester
			break;
		case globals_st::dataEvent_t::ev_new_time:
			// todo get the current time and send it to the requester
			break;
		case globals_st::dataEvent_t::ev_fw_version_req:
			txData[0]=(uint8_t)sv_fw_version_req;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;
		case globals_st::dataEvent_t::ev_fw_new_version:
			txData[0]=(uint8_t)sv_fw_new_version;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;
		case globals_st::dataEvent_t::ev_global_deletion:
			txData[0]=(uint8_t)sv_global_deletion;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;
		case globals_st::dataEvent_t::ev_set_output:
			txData[0]=(uint8_t)sv_drive_outputs;
			txData[1]=dataev.tag.params[0];
			txData[2]=dataev.tag.params[1];
			txData[3]=dataev.tag.params[2];
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,4);
			break;
		case globals_st::dataEvent_t::ev_mac_address:
			txData[0]=(uint8_t)sv_mac_address;
			// in dataev.tag.params[0] there is the ID
			txData[1]=dataev.tag.params[1];
			txData[2]=dataev.tag.params[2];
			txData[3]=dataev.tag.params[3];
			txData[4]=dataev.tag.params[4];
			txData[5]=dataev.tag.params[5];
			txData[6]=dataev.tag.params[6];
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,7);
			break;
		case globals_st::dataEvent_t::ev_ip_address:
			txData[0]=(uint8_t)sv_ip_address;
			// in dataev.tag.params[0] there is the ID
			txData[1]=dataev.tag.params[1];
			txData[2]=dataev.tag.params[2];
			txData[3]=dataev.tag.params[3];
			txData[4]=dataev.tag.params[4];
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,5);
			break;
		case globals_st::dataEvent_t::ev_memory_dump:
			txData[0]=(uint8_t)sv_memory_dump;
			gd.dumpFromMaster=true;
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
			break;
		case globals_st::dataEvent_t::ev_terminal_list:
			// handle other data if is a web event
			if(gd.enableWebCommands && dataev.isWebEvent)
				{
				gd.deviceList[f.frame.srcID].mainState=globals_st::sl_terminal_request;
				gd.deviceList[f.frame.srcID].workerState=globals_st::wkr_nterm_req;
				}
			else
				{
				txData[0]=(uint8_t)sv_present_terminals_req;
				comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,1);
				}
			break;
		case globals_st::dataEvent_t::ev_terminal_data_req:
			txData[0]=(uint8_t)sv_terminal_data_req;
			txData[1]=dataev.tag.params[0];
			comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,2);
			break;

		default:
			// all other cases are handled before
			break;
		}

	}
else
	{
	// all ok or nothing else to handle
	/*
	 * scan all badge database and send it to the requestor
	 */
	if(gd.dumpTriggerFromCfg)
		{
		// create an event to start dump
		globals_st::dataEvent_t de;
		de.dataEvent=globals_st::dataEvent_t::ev_memory_dump;
		de.tag.params[0]=f.frame.srcID;	// id
		pushEvent(de,de.tag.params[0]);

		gd.dumpTriggerFromCfg=false;
		}
	else if(db->getBadgeFromId(gd.deviceList[f.frame.srcID].badgeIDindex,tmpBPar,false) && gd.badgeAutoSend)
		{
		tmpBPar.link=NULL_LINK;
		tmpBPar.crc8=CRC8calc((uint8_t*)&tmpBPar.Parameters_s,sizeof(tmpBPar.Parameters_s));
		txData[0]=(uint8_t)sv_badge_data;
		memcpy(&txData[1],&tmpBPar,sizeof(Badge_parameters_t));
		//comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,sizeof(Badge_parameters_t)+1);
		comm->sendAnswer(f.frame.srcID,f.frame.cmd,txData,sizeof(Badge_parameters_t)+1);
		gd.deviceList[f.frame.srcID].badgeIDindex++;
		}
	else
		{
		gd.deviceList[f.frame.srcID].badgeIDindex=1;
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
		}
	//comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
}

/**
 * handle network event
 */
void Slave::handleVarcoEvent()
{
Event_t ev;

dbg->trace(DBG_NOTIFY,"New event from master id:%d",f.frame.srcID);
memcpy(&ev,f.frameData,sizeof(Event_t));
switch(ev.Parameters_s.eventCode)
	{
	case transit:
	case checkin:
		db->setArea(ev.Parameters_s.idBadge,ev.Parameters_s.area);
		break; // not used becaus the event must be stored
	default:
		break;
	}
db->addEvent(ev);
comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
}

/**
 * handle the bdge area request
 */
void Slave::handleRequestArea()
{
uint16_t bid=*(uint16_t*)f.frameData;

int area=db->getArea(bid);
if(area>=0)
	{
	txData[0]=(uint8_t)area;
	dbg->trace(DBG_NOTIFY,"Badge id %d found, current area: %d",bid,(int)area);
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_REQUEST_CURRENT_AREA,	txData,1);
	}
else
	{
	dbg->trace(DBG_WARNING,"Badge id %d not found or some other error occurs",bid);
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
	}
}

//-----------------------------------------------------------------------------
// FIRMWARE HANDLING MEMBERS
//-----------------------------------------------------------------------------
/**
 * load all firmware data already present in the update folder
 */
void Slave::firmwareLoadData()
{
vector<string> files;
fwData_t fw;
ifstream f;
string line,cmd;
vector<string> toks;

// take all data files
fileList(FIRMWARE_UPD_PATH,files,_S FIRMWARE_TXT_EXT,true);

firmwares.clear();
FOR_EACH(it,string,files)
	{
	if(startsWith(*it,FIRMWARE_VARCOLAN))
		{
		fw.fwMetadata.fw_type=DEVICE_TYPE_VARCOLAN;
		fw.name="varcolan";
		}
	else if(startsWith(*it,FIRMWARE_SUPPLY))
		{
		fw.fwMetadata.fw_type=DEVICE_TYPE_SUPPLY_MONITOR;
		fw.name="supply";
		}
	else if(startsWith(*it,FIRMWARE_DISPLAY))
		{
		fw.fwMetadata.fw_type=DEVICE_TYPE_DISPLAY;
		fw.name="display";
		}
	else
		{
		dbg->trace(DBG_WARNING,"unknown firmware firmware " + *it);
		}

	// compose filenames
	fw.firmwareTxt=FIRMWARE_UPD_PATH + fw.name + FIRMWARE_TXT_EXT;
	fw.firmwareBin=FIRMWARE_UPD_PATH + fw.name + FIRMWARE_BIN_EXT;

	// check MD5 validity
	if(firmwareCheckMD5(fw.fwMetadata.fw_type))
		{
		f.open(fw.firmwareTxt.c_str());
		if(f.is_open())
			{
			// read the file
			getline(f, line);	// md5
			getline(f, line);	// version
			toks.clear();
			Split(line,toks,"#.");
			fw.fwMetadata.version.major=atoi(toks[0].c_str());
			fw.fwMetadata.version.minor=atoi(toks[1].c_str());
			// get the file size
			FILE *fp;
			fp=fopen(fw.firmwareBin.c_str(),"rb");
			if(fp)
				{
				fw.fwMetadata.fw_size=filelength(fp);
				// calculates its crc32
				uint8_t b;
				fw.fwMetadata.fw_crc32=CRC32_INIT;
				int cnt=0;
				while(!feof(fp))
					{
					cnt=fread(&b,1,1,fp);
					if(cnt)	crc32(b,&fw.fwMetadata.fw_crc32);
					}
				//cout << cnt << endl;
				dbg->trace(DBG_NOTIFY,"firmware %s size %lu bytes (crc32: %04X) ver. %02X.%02X",
						fw.firmwareBin.c_str(),
						fw.fwMetadata.fw_size,
						fw.fwMetadata.fw_crc32,
						(unsigned int)fw.fwMetadata.version.major,
						(unsigned int)fw.fwMetadata.version.minor
						);
				fclose(fp);
				firmwares.push_back(fw);
				}
			else
				{
				dbg->trace(DBG_ERROR,"unable to open firmware file " + fw.firmwareBin);
				}
			f.close();
			}
		else
			{
			dbg->trace(DBG_ERROR,"unable to open txt firmware data file " + fw.firmwareTxt);
			}
		}
	else
		{
		dbg->trace(DBG_WARNING,"corrupted files are removed");
		// remove all firmwares
		string cmd= "rm "+ _S FIRMWARE_UPD_PATH + fw.name + "*";
		remove(cmd.c_str());
		}
	}
dbg->trace(DBG_NOTIFY,"found %d firmwares",firmwares.size());
}


/**
 * check if there is a new firmware
 * @return type of new firmware (for which device)
 */
globals_st::dataEvent_t Slave::firmwareCheckForNew()
{
globals_st::dataEvent_t ev;
uint8_t type=DEVICE_TYPE_NONE;
vector<string> files;
string name;

fileList(FIRMWARE_NEW_PATH,files,_S FIRMWARE_PKG_EXT,true);

// NOTE: scan all files but takes only the first one
ev.dataEvent=globals_st::dataEvent_t::ev_none;
FOR_EACH(it,string,files)
	{
	if(startsWith(*it,FIRMWARE_VARCOLAN))
		{
		type=DEVICE_TYPE_VARCOLAN;
		name=FIRMWARE_VARCOLAN;
		}
	else if(startsWith(*it,FIRMWARE_SUPPLY))
		{
		type=DEVICE_TYPE_SUPPLY_MONITOR;
		name=FIRMWARE_SUPPLY;
		}
	else if(startsWith(*it,FIRMWARE_DISPLAY))
		{
		type=DEVICE_TYPE_DISPLAY;
		name=FIRMWARE_DISPLAY;
		}
	else if(startsWith(*it,FIRMWARE_SUPERVISOR))
		{
		type=DEVICE_TYPE_SUPERVISOR;
		name=FIRMWARE_SUPERVISOR;
		}

	string cmd="mv " + _S FIRMWARE_NEW_PATH + *it + " " FIRMWARE_UPD_PATH + name + FIRMWARE_PKG_EXT;
	system(cmd.c_str());
	system("sync");
	dbg->trace(DBG_NOTIFY,"found new varcolan firmware: " + *it);
	// unpack the firmware
	if(firmwareUnpack(type))
		{
		// reload the entire firmware database
		firmwareLoadData();
		// search the data
		fwit_t it=find(firmwares.begin(),firmwares.end(),type);
		if(it!=firmwares.end())
			{
			// all OK
			ev.dataEvent=globals_st::dataEvent_t::ev_fw_new_version;
			ev.tag.fw_device_type=type;
			break;	// return!
			}
		else
			{
			dbg->trace(DBG_ERROR,"the new FW is not loaded in the database");
			}
		}
	}
return ev;
}

/**
 * unpack a packaged firmware and check its integrity
 * @param type
 * @param pkgfname (optional) package filename (no extension) usefull if it has no standard name
 * @return true:ok
 */
bool Slave::firmwareUnpack(uint8_t type, string pkgfname)
{
bool ret=false;
string pkg,cmd;
if(pkg.empty())
	{
	switch(type)
		{
		case DEVICE_TYPE_VARCOLAN:
			// open the txt file
			pkg=FIRMWARE_VARCOLAN;
			break;
		case DEVICE_TYPE_SUPERVISOR:
			pkg=FIRMWARE_SUPERVISOR;
			break;
		case DEVICE_TYPE_SUPPLY_MONITOR:
			pkg=FIRMWARE_SUPPLY;
			break;
		case DEVICE_TYPE_DISPLAY:
			pkg=FIRMWARE_DISPLAY;
			break;
		}
	}
else
	{
	pkg=pkgfname;
	}

dbg->trace(DBG_NOTIFY,"unpacking firmware package " + pkg);
cmd=_S FIRMWARE_UPD_PATH + FIRMWARE_UNPACKER + " " + pkg + " " + RESULT_TXT_FILE + " rmpack";
system(cmd.c_str());

// check the md5 test result
ifstream f;
string line;
string resfile=_S FIRMWARE_UPD_PATH + _S RESULT_TXT_FILE;
f.open(resfile.c_str());
if(f.is_open())
	{
	getline(f, line);
	size_t found=line.find(pkg);
	if(found!=string::npos)
		{
		found=line.find("OK");
		if(found!=string::npos)
			{
			dbg->trace(DBG_NOTIFY,"MD5 firmware: " + line);
			ret=true;
			}
		else
			{
			dbg->trace(DBG_ERROR,"invalid MD5 firmware -> remove all wrong files");
			cmd="rm " + _S FIRMWARE_UPD_PATH + pkg + "*";
			system(cmd.c_str());
			}
		}
	else
		{
		dbg->trace(DBG_ERROR,"wrong firmware: " + line);
		}
	f.close();
	}
remove(resfile.c_str());

return true;
}

/**
 * check tne MD5 for thefirmware specified
 * @param type
 * @return true:ok
 */
bool Slave::firmwareCheckMD5(uint8_t type)
{
bool ret=false;
string name,cmd;
ifstream f;
string line;

switch(type)
	{
	case DEVICE_TYPE_VARCOLAN:
		// open the txt file
		name=FIRMWARE_VARCOLAN;
		break;
	case DEVICE_TYPE_SUPERVISOR:
		name=FIRMWARE_SUPERVISOR;
		break;
	case DEVICE_TYPE_SUPPLY_MONITOR:
		name=FIRMWARE_SUPPLY;
		break;
	case DEVICE_TYPE_DISPLAY:
		name=FIRMWARE_DISPLAY;
		break;
	}

// perform md5 check
cmd="cd " +  _S FIRMWARE_UPD_PATH + " && md5sum -c " + name + FIRMWARE_TXT_EXT + " > " + RESULT_TXT_FILE;
system(cmd.c_str());

// read the md5 test result
string resfile=_S FIRMWARE_UPD_PATH + _S RESULT_TXT_FILE;
f.open(resfile.c_str());
if(f.is_open())
	{
	getline(f, line);
	size_t found=line.find(name);
	if(found!=string::npos)
		{
		found=line.find("OK");
		if(found!=string::npos)
			{
			dbg->trace(DBG_NOTIFY,"firmware: " + line);
			ret=true;
			}
		else
			{
			dbg->trace(DBG_ERROR,"invalid MD5 firmware");
			//cmd="rm " + _S FIRMWARE_UPD_PATH + name + "*";
			//system(cmd.c_str());
			}
		}
	else
		{
		dbg->trace(DBG_ERROR,"wrong firmware: " + line);
		}
	f.close();
	}
remove(resfile.c_str());
return ret;
}

/**
 * check the firmware version, if it is < of the one stored in the supervisor -> true
 * @param type
 * @param major
 * @param minor
 * @return true if the device need to be updated; false: not or SV does not have the firmware
 */
bool Slave::firmwareCheckVersion(uint8_t type, uint8_t major, uint8_t minor)
{
ifstream f;
string line;
vector<string> toks;
int fwver_sv,fwver_dev;
bool ret=false;

fwit_t it=find(firmwares.begin(),firmwares.end(),type);
if(it==firmwares.end()) return ret;	// firmware not found

f.open(it->firmwareTxt.c_str());
if(f.is_open())
	{
	// read the file
	getline(f, line);	// md5
	getline(f, line);	// version
	Split(line,toks,"#.");
	//it->fwMetadata.version.major=atoi(toks[0].c_str());
	//it->fwMetadata.version.minor=atoi(toks[1].c_str());
	fwver_sv=it->fwMetadata.version.major*100+it->fwMetadata.version.minor;
	fwver_dev=major*100+minor;
	if(fwver_sv>fwver_dev)
		{
		ret=true;
		}
	f.close();
	}
return ret;
}

/**
 * send a firmware chunk to the requester
 * @param type
 * @param startByte
 * @param amount
 * @return true: ok; false: firmware not found
 */
bool Slave::firmwareChunkSend(uint8_t type, uint32_t startByte,uint8_t amount)
{
bool ret=false;
FILE *fp;

// search firmware
if(actualType!=type)
	{
	actual_it=find(firmwares.begin(),firmwares.end(),type);
	if(actual_it==firmwares.end())
		{
		actualType=DEVICE_TYPE_NONE;
		return ret;	// firmware not found
		}
	actualType=type;
	}

fp=fopen(actual_it->firmwareBin.c_str(),"rb");
if(fp)
	{
	fseek(fp, startByte, SEEK_SET);
	memset(txData,0xff,amount);
	size_t n=fread(txData,1,amount,fp);
	if(n)
		{
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_SV_FW_CHUNK_REQ,	txData,amount);
		int rem=(actual_it->fwMetadata.fw_size > (startByte+amount)) ? (actual_it->fwMetadata.fw_size-(startByte+amount)) : (0);
		dbg->trace(DBG_NOTIFY,"FW update: sent %d bytes from 0x%04X, remaining %lu bytes",amount,startByte,rem);
		fclose(fp);
		}
	else
		{
		dbg->trace(DBG_NOTIFY,"No more data to read from " + actual_it->firmwareBin);
		comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
		}
	ret=true;
	}
else
	{
	dbg->trace(DBG_ERROR,"unable to open firmware file " + actual_it->firmwareBin);
	}
return ret;
}

/**
 * handle the memory data dump of a master
 */
void Slave::handleMasterDump()
{
Weektime_parameters_t *wp;
Profile_parameters_t *pp;
Badge_parameters_t *bp;
char name[MAX_NAME_SIZE];
int tmp;

try
	{
	switch(f.frameData[0])
		{
		case WEEKTIME_TYPE:	// weektime data
			wp=(Weektime_parameters_t *)&f.frameData[1];
			dbg->trace(DBG_NOTIFY,"weektime %d data dump",wp->Parameters_s.weektimeId);
			sprintf(name,"Weektime%d",wp->Parameters_s.weektimeId);
			db->setWeektime(wp->Parameters_s.weektimeId,_S name,*wp);
			if(!db->updateWeektime(wp->Parameters_s.weektimeId,""))
				{
				dbg->trace(DBG_ERROR,"cannot update weektime %d in the database",wp->Parameters_s.weektimeId);
				throw false;
				}
			break;

		case PROFILE_TYPE:	// profile data
			pp=(Profile_parameters_t *)&f.frameData[1];
			dbg->trace(DBG_NOTIFY,"profile %d data dump",pp->Parameters_s.profileId);
			sprintf(name,"Profile%d",pp->Parameters_s.profileId);
			db->setProfile(pp->Parameters_s.profileId,_S name,*pp);
			if(!db->updateProfile(pp->Parameters_s.profileId,""))
				{
				dbg->trace(DBG_ERROR,"cannot update profile %d in the database",pp->Parameters_s.profileId);
				throw false;
				}
			break;

		case BADGE_TYPE:	// badge data
			bp=(Badge_parameters_t *)&f.frameData[1];
			dbg->trace(DBG_NOTIFY,"badge %d data dump",bp->Parameters_s.ID);
			tmp=db->setBadge(*bp);
			if(tmp<0)
				{
				dbg->trace(DBG_ERROR,"cannot add badge %d in the database",bp->Parameters_s.ID);
				throw false;
				}
			if(bp->Parameters_s.ID != tmp)
				{
				dbg->trace(DBG_WARNING,"badge ID is not equal: from master=%d, mine DB=%d",bp->Parameters_s.ID,tmp);
				}
			break;

		case STOP_TYPE: // end of dump
			if(gd.dumpFromMaster)
				{
				cfg->updateVariable("DUMP_FROM_MASTER", "0");	// ensure one-shot!
				gd.cfgChanged=true;
				gd.dumpFromMaster=false;
				}
			break;
		}
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_ACK,0,0);
	}
catch(...)
	{
	comm->sendAnswer(f.frame.srcID,HPROT_CMD_NACK,0,0);
	}
}

/**
 * check in the database if there are some commands
 */
void Slave::exeWebCommands()
{
// check for web commands (or a simulated one)
if(db->getCommand() || gd.simWeb_trigger)
	{
	if(gd.simWeb_trigger)
		{
		db->webCommand.command=gd.simWeb_command;
		db->webCommand.rowid=0;
		}
	if(parseScriptLine(db->webCommand.command,NULL,true,db->webCommand.rowid))
		{
		webCommandInProgress=true;
		}
	}
}
